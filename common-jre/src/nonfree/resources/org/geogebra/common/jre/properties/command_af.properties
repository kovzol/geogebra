# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
ANOVA.Syntax=[ <Lys>, <Lys>, ... ]
AffineRatio=VerwanteVerhouding
AffineRatio.Syntax=[ <Punt>, <Punt>, <Punt> ]
Angle=Hoek
Angle.Syntax=[ <Objek> ]\n[ <Vektor>, <Vektor> ]\n[ <Lyn>, <Lyn> ]\n[ <Punt>, <Apeks>, <Punt> ]\n[ <Punt>, <Apeks>, <Hoek> ]
Angle.Syntax3D=[ <Objek> ]\n[ <Vektor>, <Vektor> ]\n[ <Lyn>, <Lyn> ]\n[ <Lyn>, <Plane> ]\n[ <Plane>, <Plane> ]\n[ <Punt>, <Apeks>, <Punt> ]\n[ <Punt>, <Apeks>, <Hoek> ]\n[ <Punt>, <Punt>, <Punt>, <Direction> ]
AngularBisector=HoekHalveerder
AngularBisector.Syntax=[ <Lyn>, <Lyn> ]\n[ <Punt>, <Punt>, <Punt> ]
Append=Toevoeg
Append.Syntax=[ <Lys>, <Objek> ]\n[ <Objek>, <Lys> ]
ApplyMatrix=PasMatriksToe
ApplyMatrix.Syntax=[ <Matriks>, <Objek> ]
Arc=Boog
Arc.Syntax=[ <Sirkel>, <Punt>, <Punt> ]\n[ <Ellips>, <Punt>, <Punt> ]\n[ <Sirkel>, <Parameter Waarde>, <Parameter Waarde> ]\n[ <Ellips>, <Parameter Waarde>, <Parameter Waarde> ]
AreCollinear=IsSaamlynig
AreCollinear.Syntax=[ <Punt>, <Punt>, <Punt> ]
AreConcurrent=IsKonkurrent
AreConcurrent.Syntax=[ <Lyn>, <Lyn>, <Lyn> ]
AreConcyclic=IsKonsiklies
AreConcyclic.Syntax=[ <Punt>, <Punt>, <Punt>, <Punt> ]
AreCongruent.Syntax=[ <Objek>, <Objek> ]
AreEqual=IsGelyk
AreEqual.Syntax=[ <Objek>, <Objek> ]
AreParallel=IsParallel
AreParallel.Syntax=[ <Lyn>, <Lyn> ]
ArePerpendicular=IsLoodreg
ArePerpendicular.Syntax=[ <Lyn>, <Lyn> ]
Area=Oppervlakte
Area.Syntax=[ <Keël> ]\n[ <Poligoon> ]\n[ <Punt>, ..., <Punt> ]
Assume.SyntaxCAS=[ <Condition>, <Uitdrukking> ]
Asymptote=Asimptoot
Asymptote.Syntax=[ <Objek> ]
AttachCopyToView=HegAfskrifOmTeKyk
AttachCopyToView.Syntax=[ <Objek>, <Kyk 0|1|2> ]\n[ <Objek>, <Kyk 0|1|2>, <Punt 1>, <Punt 2>, <Skerm Punt 1>, <Skerm Punt 2> ]
Axes=Asse
Axes.Syntax=[ <Keël> ]
Axes.Syntax3D=[ <Keël> ]\n[ <Kwadriek> ]
AxisStepX=AsStapX
AxisStepX.Syntax=[ ]
AxisStepY=AsStapY
AxisStepY.Syntax=[ ]
BarChart=StaafGrafiek
BarChart.Syntax=[ <Lys van Data>, <Lys van Frekwensies> ]\n[ <Lys van Rou Data>, <Wydte van Stawe>, <Vertikale Skaal Faktor (optioneel)> ]\n[ <Lys van Data>, <Lys van Frekwensies>, <Wydte van Stawe> ]\n[ <Begin Waarde>, <Eind Waarde>, <Lys van Hoogtes> ]\n[ <Begin Waarde>, <Eind Waarde>, <Uitdrukking>, <Veranderlike>, <Van Getal>, <Tot Getal> ]\n[ <Begin Waarde>, <Eind Waarde>, <Uitdrukking>, <Veranderlike>, <Van Getal>, <Tot Getal>, <Stap Wydte> ]
Barycenter=Barisentrum
Barycenter.Syntax=[ <Lys van Punte>, <Lys van Gewigte> ]
Bernoulli.Syntax=[ <Waarskynlikheid>, <Boolean Kumulatief> ]
BetaDist.Syntax=[ <Alpha>, <Beta>, <Variable Value> ]\n[ <Alpha>, <Beta>, <Variable Value>, <Boolean Kumulatief>  ]\n[ <Alpha>, <Beta>, x, <Boolean Kumulatief> ]
Binomial=BinomiaalKoëffisiënt
Binomial.Syntax=[ <Getal n>, <Getal r> ]
BinomialDist=BinomiaalDist
BinomialDist.Syntax=[ <Aantal Eksperimente>, <Waarskynlikheid van Sukses> ]\n[ <Aantal Eksperimente>, <Waarskynlikheid van Sukses>, <Boolean Kumulatief> ]\n[ <Aantal Eksperimente>, <Waarskynlikheid van Sukses>, <List of Values> ]\n[ <Aantal Eksperimente>, <Waarskynlikheid van Sukses>, <Variable Value>, <Boolean Kumulatief> ]
BinomialDist.SyntaxCAS=[ <Aantal Eksperimente>, <Waarskynlikheid van Sukses>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Aantal Eksperimente>, <Waarskynlikheid van Sukses>, <List of Values> ]
Bottom=Onderkant
Bottom.Syntax=[ <Kwadriek> ]
BoxPlot=BoksDiagram
BoxPlot.Syntax=[ <yOffset>, <yScale>, <Lys van Rou Data> ]\n[ <yOffset>, <yScale>, <Lys van Rou Data>, <Boolean Outliers> ]\n[ <yOffset>, <yScale>, <Lys van Data>, <Lys van Frekwensies>, <Boolean Outliers> ]\n[ <yOffset>, <yScale>, <Begin Waarde>, <Q1>, <Median>, <Q3>, <Eind Waarde> ]
Button=Knoppie
Button.Syntax=[ ]\n[ <Kapsie> ]
CASLoaded.Syntax=[]
CFactor=CFaktor
CFactor.SyntaxCAS=[ <Uitdrukking> ]\n[ <Uitdrukking>, <Veranderlike> ]
CIFactor.SyntaxCAS=[ <Uitdrukking> ]\n[ <Uitdrukking>, <Veranderlike> ]
CSolutions=COplossings
CSolutions.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Veranderlike> ]\n[ <List of Equations>, <List of Variables> ]
CSolve=COplos
CSolve.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Veranderlike> ]\n[ <List of Equations>, <List of Variables> ]
Cauchy.Syntax=[ <Median>, <Scale>, <Variable Value> ]\n[ <Median>, <Scale>, <Variable Value>, <Boolean Kumulatief>  ]\n[ <Median>, <Scale>, x, <Boolean Kumulatief> ]
Cauchy.SyntaxCAS=[ <Median>, <Scale>, <Variable Value> ]
Cell=Sel
Cell.Syntax=[ <Kolom>, <Ry> ]
CellRange=SelReikwydte
CellRange.Syntax=[ <Begin Sel>, <Eind Sel> ]
Center=Middelpunt
Center.Syntax=[ <Keël> ]
Center.Syntax3D=[ <Keël> ]\n[ <Kwadriek> ]
CenterView.Syntax=[ <Center Point> ]
Centroid=Sentroide
Centroid.Syntax=[ <Poligoon> ]
CharacteristicPolynomial.Syntax=[ <Matriks> ]
Checkbox=Merkboks
Checkbox.Syntax=[ ]\n[ <Kapsie> ]\n[ <Lys> ]\n[ <Kapsie>, <Lys> ]
ChiSquared=ChiKwadraat
ChiSquared.Syntax=[ <Degrees of Freedom>, <Variable Value> ]\n[ <Degrees of Freedom>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Degrees of Freedom>, x, <Boolean Kumulatief> ]
ChiSquared.SyntaxCAS=[ <Degrees of Freedom>, <Veranderlike> ]
ChiSquaredTest.Syntax=[ <Matriks> ]\n[ <Lys>, <Lys> ]\n[ <Matriks>, <Matriks> ]
Circle=Sirkel
Circle.Syntax=[ <Punt>, <Radius> ]\n[ <Punt>, <Segment> ]\n[ <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Punt> ]
Circle.Syntax3D=[ <Punt>, <Radius> ]\n[ <Punt>, <Segment> ]\n[ <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Punt> ]\n[ <Lyn>, <Punt> ]\n[ <Punt>, <Radius>, <Direction> ]\n[ <Punt>, <Punt>, <Direction> ]
CircleArc=SirkelBoog
CircleArc.Syntax=[ <Middelpunt>, <Punt>, <Punt> ]
CircleSector=SirkelSektor
CircleSector.Syntax=[ <Middelpunt>, <Punt>, <Punt> ]
CircumcircleArc=SirkelBoog
CircumcircleArc.Syntax=[ <Punt>, <Punt>, <Punt> ]
CircumcircleSector=SireklSektor
CircumcircleSector.Syntax=[ <Punt>, <Punt>, <Punt> ]
Circumference=Omtrek
Circumference.Syntax=[ <Keël> ]
Classes=Klasse
Classes.Syntax=[ <Lys van Data>, <Aantal Klasse> ]\n[ <Lys van Data>, <Begin>, <Wydte van Klasse> ]
ClosestPoint=NaastePunt
ClosestPoint.Syntax=[ <Path>, <Punt> ]\n[ <Lyn>, <Lyn> ]
ClosestPointRegion.Syntax=[ <Region>, <Punt> ]
Coefficients=Koëffisiënte
Coefficients.Syntax=[ <Polinoom> ]\n[ <Keël> ]
Coefficients.SyntaxCAS=[ <Polinoom> ]\n[ <Polinoom>, <Veranderlike> ]
Column=Kolom
Column.Syntax=[ <Sigblad Sel> ]
ColumnName=KolomNaam
ColumnName.Syntax=[ <Sigblad Sel> ]
Command=Opdrag
CommonDenominator=GemeneNoemer
CommonDenominator.Syntax=[ <Uitdrukking>, <Uitdrukking> ]
CompleteSquare=VoltooiVierkant
CompleteSquare.Syntax=[ <Kwadratiese Funksie> ]
ComplexRoot=ComplekseWortel
ComplexRoot.Syntax=[ <Polinoom> ]
Cone.Syntax=[ <Sirkel>, <Height> ]\n[ <Punt>, <Punt>, <Radius> ]\n[ <Punt>, <Vektor>, <Hoek> ]
ConeInfinite.Syntax=[ <Punt>, <Vektor>, <Hoek> ]\n[ <Punt>, <Punt>, <Hoek> ]\n[ <Punt>, <Lyn>, <Hoek> ]
Conic=Keël
Conic.Syntax=[ <Lys> ]\n[ <Punt>, <Punt>, <Punt>, <Punt>, <Punt> ]\n[ <Number>, <Number>, <Number>, <Number>, <Number>, <Number> ]
ConstructionStep.Syntax=[ ]\n[ <Objek> ]
ContingencyTable.Syntax=[ <List of Text>, <List of Text> ]\n[ <List of Text>, <List of Text>, <Options> ]\n[ <List of Row Values>, <List of Column Values>, <Frequency Table> ]\n[ <List of Row Values>, <List of Column Values>, <Frequency Table> , <Options> ]
ContinuedFraction.Syntax=[ <Number> ]\n[ <Number>, <Level> ]\n[ <Number>, <Level>, <Boolean Shorthand> ]
ConvexHull.Syntax=[ <Lys van Punte> ]
CopyFreeObject.Syntax=[ <Objek> ]
Corner.Syntax=[ <Number of Corner> ]\n[ <Image>, <Number of Corner> ]\n[ <Text>, <Number of Corner> ]\n[ <Graphics View>, <Number of Corner> ]
CountIf.Syntax=[ <Condition>, <Lys> ]\n[ <Condition>, <Veranderlike>, <Lys> ]
Covariance.Syntax=[ <Lys van Punte> ]\n[ <List of Numbers>, <List of Numbers> ]
Cross.Syntax=[ <Vektor>, <Vektor> ]
CrossRatio.Syntax=[ <Punt>, <Punt>, <Punt>, <Punt> ]
Cube.Syntax=[ <Square> ]\n[ <Punt>, <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Direction> ]
Cubic.Syntax=[ <Punt>, <Punt>, <Punt>, <Number> ]
Curvature.Syntax=[ <Punt>, <Objek> ]
CurvatureVector.Syntax=[ <Punt>, <Objek> ]
CurveCartesian.Syntax=[ <Uitdrukking>, <Uitdrukking>, <Parameter Variable>, <Begin Waarde>, <Eind Waarde> ]
CurveCartesian.Syntax3D=[ <Uitdrukking>, <Uitdrukking>, <Parameter Variable>, <Begin Waarde>, <Eind Waarde> ]\n[ <Uitdrukking>, <Uitdrukking>, <Uitdrukking>, <Parameter Variable>, <Begin Waarde>, <Eind Waarde> ]
Cylinder.Syntax=[ <Sirkel>, <Height> ]\n[ <Punt>, <Punt>, <Radius> ]
CylinderInfinite.Syntax=[ <Lyn>, <Radius> ]\n[ <Punt>, <Vektor>, <Radius> ]\n[ <Punt>, <Punt>, <Radius> ]
DataFunction.Syntax=[ <List of Numbers>, <List of Numbers> ]
Defined.Syntax=[ <Objek> ]
Degree.Syntax=[ <Polinoom> ]
Degree.SyntaxCAS=[ <Polinoom> ]\n[ <Polinoom>, <Veranderlike> ]
DelauneyTriangulation.Syntax=[ <Lys van Punte> ]
Delete.Syntax=[ <Objek> ]
Denominator.Syntax=[ <Number> ]\n[ <Function> ]
Denominator.SyntaxCAS=[ <Uitdrukking> ]
Derivative.Syntax=[ <Function> ]\n[ <Curve> ]\n[ <Function>, <Number> ]\n[ <Function>, <Veranderlike> ]\n[ <Curve>, <Number> ]\n[ <Function>, <Veranderlike>, <Number> ]
Derivative.SyntaxCAS=[ <Uitdrukking> ]\n[ <Uitdrukking>, <Veranderlike> ]\n[ <Uitdrukking>, <Veranderlike>, <Number> ]
Determinant.Syntax=[ <Matriks> ]
Diameter.Syntax=[ <Vektor>, <Keël> ]\n[ <Lyn>, <Keël> ]
Difference.Syntax=[ <Poligoon>, <Poligoon> ]
Dilate.Syntax=[ <Objek>, <Dilation Factor> ]\n[ <Objek>, <Dilation Factor>, <Dilation Center Point> ]
Dimension.Syntax=[ <Objek> ]
Direction.Syntax=[ <Lyn> ]
Directrix.Syntax=[ <Keël> ]
Distance.Syntax=[ <Punt>, <Objek> ]\n[ <Lyn>, <Lyn> ]\n[ <Plane>, <Plane> ]
Distance.SyntaxCAS=[ <Punt>, <Objek> ]
Div.Syntax=[ <Dividend Number>, <Divisor Number> ]\n[ <Dividend Polynomial>, <Divisor Polynomial> ]
Division.Syntax=[ <Dividend Number>, <Divisor Number> ]\n[ <Dividend Polynomial>, <Divisor Polynomial> ]
Divisors.Syntax=[ <Number> ]
DivisorsList.Syntax=[ <Number> ]
DivisorsSum.Syntax=[ <Number> ]
Dodecahedron.Syntax=[ <Regular Pentagon> ]\n[ <Punt>, <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Direction> ]
Dot.Syntax=[ <Vektor>, <Vektor> ]
DotPlot.Syntax=[ <Lys van Rou Data>, <Stack Adjacent Dots (optional)>, <Scale Factor (optional)>]
DynamicCoordinates.Syntax=[ <Punt>, <x-Coordinate>, <y-Coordinate> ]\n[ <Punt>, <x-Coordinate>, <y-Coordinate>, <z-Coordinate> ]
Eccentricity.Syntax=[ <Keël> ]
Eigenvalues.SyntaxCAS=[ <Matriks> ]
Eigenvectors.SyntaxCAS=[ <Matriks> ]
Element.Syntax=[ <Lys>, <Position of Element> ]\n[ <Matriks>, <Ry>, <Kolom> ]\n[ <Lys>, <Index1>, <Index2>, ... ]
Element.SyntaxCAS=[ <Lys>, <Position of Element> ]\n[ <Matriks>, <Ry>, <Kolom> ]
Eliminate.Syntax=[ <List of Polynomials>, <List of Variables> ]
Ellipse.Syntax=[ <Focus>, <Focus>, <Semimajor Axis Length> ]\n[ <Focus>, <Focus>, <Segment> ]\n[ <Focus>, <Focus>, <Punt> ]
Ends.Syntax=[ <Kwadriek> ]
Envelope.Syntax=[ <Path>, <Punt> ]
Erlang.Syntax=[ <Shape>, <Rate>, <Variable Value> ]\n[ <Shape>, <Rate>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Shape>, <Rate>, x, <Boolean Kumulatief> ]
Excentricity.Syntax=[ <Keël> ]
Execute.Syntax=[ <List of Text> ]\n[ <List of Text>, <Parameter>, <Parameter>, ... ]
Expand.Syntax=[ <Uitdrukking> ]
Exponential.Syntax=[ <Lambda>, <Variable Value> ]\n[ <Lambda>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Lambda>, x, <Boolean Kumulatief> ]
Exponential.SyntaxCAS=[ <Lambda>, <Variable Value> ]
ExportImage.Syntax=[ <Property>, <Ixabiso>, <Property>, <Ixabiso>, ... ]
ExtendedGCD.Syntax=[ <Integer>, <Integer>]\n[ <Polinoom>, <Polinoom>]
Extremum.Syntax=[ <Polinoom> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Extremum.SyntaxCAS=[ <Function> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
FDistribution.Syntax=[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Variable Value> ]\n[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, x, <Boolean Kumulatief> ]
FDistribution.SyntaxCAS=[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Variable Value> ]
Factor.Syntax=[ <Polinoom> ]
Factor.SyntaxCAS=[ <Number> ]\n[ <Polinoom> ]\n[ <Uitdrukking>, <Veranderlike> ]
Factors.Syntax=[ <Polinoom> ]\n[ <Number> ]
FillCells.Syntax=[ <CellRange>, <Objek> ]\n[ <Cell>, <Lys> ]\n[ <Cell>, <Matriks> ]
FillColumn.Syntax=[ <Kolom>, <Lys> ]
FillRow.Syntax=[ <Ry>, <Lys> ]
First.Syntax=[ <Lys> ]\n[ <Text> ]\n[ <Lys>, <Number of Elements> ]\n[ <Text>, <Number of Elements> ]\n[ <Locus>, <Number of Elements> ]
First.SyntaxCAS=[ <Lys> ]\n[ <Lys>, <Number of Elements> ]
FirstAxis.Syntax=[ <Keël> ]
FirstAxisLength.Syntax=[ <Keël> ]
Fit.Syntax=[ <Lys van Punte>, <List of Functions> ]\n[ <Lys van Punte>, <Function> ]
FitExp.Syntax=[ <Lys van Punte> ]
FitGrowth.Syntax=[ <Lys van Punte> ]
FitImplicit.Syntax=[ <Lys van Punte>, <Order> ]
FitLineX.Syntax=[ <Lys van Punte> ]
FitLineY.Syntax=[ <Lys van Punte> ]
FitLog.Syntax=[ <Lys van Punte> ]
FitLogistic.Syntax=[ <Lys van Punte> ]
FitPoly.Syntax=[ <Lys van Punte>, <Degree of Polynomial> ]\n[ <Freehand Function>, <Degree of Polynomial> ]
FitPow.Syntax=[ <Lys van Punte> ]
FitSin.Syntax=[ <Lys van Punte> ]
Flatten.Syntax=[ <Lys> ]
Focus.Syntax=[ <Keël> ]
FractionText.Syntax=[ <Number> ]\n[ <Punt> ]\n[ <Number>, <Boolean Single fraction> ]
Frequency.Syntax=[ <Lys van Rou Data> ]\n[ <Boolean Kumulatief>, <Lys van Rou Data> ]\n[ <List of Class Boundaries>, <Lys van Rou Data> ]\n[ <List of Text>, <List of Text> ]\n[ <Boolean Kumulatief>, <List of Class Boundaries>, <Lys van Rou Data> ]\n[ <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <Boolean Kumulatief>, <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)> ]
FrequencyPolygon.Syntax=[ <List of Class Boundaries>, <Lys van Hoogtes> ]\n[ <List of Class Boundaries>, <Lys van Rou Data>, <Boolean Use Density>, <Density Scale Factor (optional)> ]\n[ <Boolean Kumulatief>, <List of Class Boundaries>, <Lys van Rou Data>, <Boolean Use Density>, <Density Scale Factor (optional)> ]
FrequencyTable.Syntax=[ <Lys van Rou Data>, <Scale Factor (optional)> ]\n[ <Boolean Kumulatief>, <Lys van Rou Data> ]\n[ <List of Class Boundaries>, <Lys van Rou Data> ]\n[ <Boolean Kumulatief>, <List of Class Boundaries>, <Lys van Rou Data> ]\n[ <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <Boolean Kumulatief>, <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)> ]
FromBase.Syntax=[ <Number as Text>, <Base> ]
Function.Syntax=[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <List of Numbers> ]
Function.Syntax3D=[ <List of Numbers> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Uitdrukking>, <Parameter Variable 1>, <Begin Waarde>, <Eind Waarde>, <Parameter Variable 2>, <Begin Waarde>, <Eind Waarde> ]
Function.SyntaxCAS=[ <Function>, <Start x-Value>, <End x-Value> ]
FutureValue.Syntax=[ <Rate>, <Number of Periods>, <Payment>, <Ixabiso langoku (ungakhetha)>, <Type (optional)> ]
GCD.Syntax=[ <List of Numbers> ]\n[ <Number>, <Number> ]
GCD.SyntaxCAS=[ <List of Numbers> ]\n[ <List of Polynomials> ]\n[ <Number>, <Number> ]\n[ <Polinoom>, <Polinoom> ]
Gamma.Syntax=[ <Alpha>, <Beta>, <Variable Value> ]\n[ <Alpha>, <Beta>, <Variable Value>, <Boolean Kumulatief>  ]\n[ <Alpha>, <Beta>, x, <Boolean Kumulatief> ]
Gamma.SyntaxCAS=[ <Alpha>, <Beta>, <Variable Value> ]
GeometricMean.Syntax=[ <List of Numbers> ]
GetTime.Syntax=[]\n[ <Format> ]
GroebnerDegRevLex.Syntax=[ <List of Polynomials> ]\n[ <List of Polynomials>, <List of Variables> ]
GroebnerLex.Syntax=[ <List of Polynomials> ]\n[ <List of Polynomials>, <List of Variables> ]
GroebnerLexDeg.Syntax=[ <List of Polynomials> ]\n[ <List of Polynomials>, <List of Variables> ]
HarmonicMean.Syntax=[ <List of Numbers> ]
Height.Syntax=[ <Solid> ]
HideLayer.Syntax=[ <Number> ]
Histogram.Syntax=[ <List of Class Boundaries>, <Lys van Hoogtes> ]\n[ <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <Boolean Kumulatief>, <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)> ]
HistogramRight.Syntax=[ <List of Class Boundaries>, <Lys van Hoogtes> ]\n[ <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)>  ]\n[ <Boolean Kumulatief>, <List of Class Boundaries>, <Lys van Rou Data>, <Use Density>, <Density Scale Factor (optional)> ]
HyperGeometric.Syntax=[ <Population Size>, <Number of Successes>, <Sample Size> ]\n[ <Population Size>, <Number of Successes>, <Sample Size>, <Boolean Kumulatief> ]\n[ <Population Size>, <Number of Successes>, <Sample Size>, <Variable Value>, <Boolean Kumulatief> ]
HyperGeometric.SyntaxCAS=[ <Population Size>, <Number of Successes>, <Sample Size>, <Variable Value>, <Boolean Kumulatief> ]
Hyperbola.Syntax=[ <Focus>, <Focus>, <Semimajor Axis Length> ]\n[ <Focus>, <Focus>, <Segment> ]\n[ <Focus>, <Focus>, <Punt> ]
IFactor.Syntax=[ <Polinoom> ]
IFactor.SyntaxCAS=[ <Uitdrukking> ]
Icosahedron.Syntax=[ <Equilateral Triangle> ]\n[ <Punt>, <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Direction> ]
Identity.Syntax=[ <Number> ]
If.Syntax=[ <Condition>, <Then> ]\n[ <Condition>, <Then>, <Else> ]
ImplicitCurve.Syntax=[ <Lys van Punte> ]\n[ <f(x, y)> ]
ImplicitDerivative.Syntax=[ <f(x, y)> ]
ImplicitDerivative.SyntaxCAS=[ <f(x, y)> ]\n[ <Uitdrukking>, <Dependent Variable>, <Independent Variable> ]
Incircle.Syntax=[ <Punt>, <Punt>, <Punt> ]
IndexOf.Syntax=[ <Objek>, <Lys> ]\n[ <Text>, <Text> ]\n[ <Objek>, <Lys>, <Start Index> ]\n[ <Text>, <Text>, <Start Index> ]
Insert.Syntax=[ <Lys>, <Lys>, <Position> ]\n[ <Objek>, <Lys>, <Position> ]
Integral.Syntax=[ <Function> ]\n[ <Function>, <Veranderlike> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Start x-Value>, <End x-Value>, <Boolean Evaluate> ]
Integral.SyntaxCAS=[ <Function> ]\n[ <Function>, <Veranderlike> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Veranderlike>, <Begin Waarde>, <Eind Waarde> ]
IntegralBetween.Syntax=[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Function>, <Start x-Value>, <End x-Value>, <Boolean Evaluate> ]
IntegralBetween.SyntaxCAS=[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Function>, <Veranderlike>, <Begin Waarde>, <Eind Waarde> ]
IntegralSymbolic.Syntax=[ <Function> ]\n[ <Function>, <Veranderlike> ]
InteriorAngles.Syntax=[ <Poligoon> ]
Intersect.Syntax=[ <Objek>, <Objek> ]\n[ <Objek>, <Objek>, <Index of Intersection Point> ]\n[ <Objek>, <Objek>, <Initial Point> ]\n[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]\n[ <Curve 1>, <Curve 2>, <Parameter 1>, <Parameter 2> ]
Intersect.SyntaxCAS=[ <Function>, <Function> ]
IntersectConic.Syntax=[ <Plane>, <Kwadriek> ]\n[ <Kwadriek>, <Kwadriek> ]
IntersectPath.Syntax=[ <Lyn>, <Poligoon> ]\n[ <Poligoon>, <Poligoon> ]
IntersectPath.Syntax3D=[ <Lyn>, <Poligoon> ]\n[ <Poligoon>, <Poligoon> ]\n[ <Plane>, <Poligoon> ]\n[ <Plane>, <Kwadriek> ]
Intersection.Syntax=[ <Lys>, <Lys> ]
InverseBeta.Syntax=[ <Alpha>, <Beta>, <Waarskynlikheid> ]
InverseBinomial.Syntax=[ <Aantal Eksperimente>, <Waarskynlikheid van Sukses>, <Cumulative Probability> ]
InverseBinomialMinimumTrials.Syntax=[ <Cumulative Probability>, <Waarskynlikheid van Sukses>, <Number of Successes> ]
InverseBinomialMinimumTrials.SyntaxCAS=[ <Cumulative Probability>, <Waarskynlikheid van Sukses>, <Number of Successes> ]
InverseCauchy.Syntax=[ <Median>, <Scale>, <Waarskynlikheid> ]
InverseChiSquared.Syntax=[ <Degrees of Freedom>, <Waarskynlikheid> ]
InverseExponential.Syntax=[ <Lambda>, <Waarskynlikheid> ]
InverseFDistribution.Syntax=[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Waarskynlikheid> ]
InverseGamma.Syntax=[ <Alpha>, <Beta>, <Waarskynlikheid> ]
InverseHyperGeometric.Syntax=[ <Population Size>, <Number of Successes>, <Sample Size>, <Waarskynlikheid> ]
InverseLaplace.Syntax=[ <Function> ]\n[ <Function>, <Veranderlike> ]\n[ <Function>, <Veranderlike>, <Veranderlike> ]
InverseLogNormal.Syntax=[ <Mean>, <Standard Deviation>, <Waarskynlikheid> ]
InverseLogistic.Syntax=[ <Mean>, <Scale>, <Waarskynlikheid> ]
InverseNormal.Syntax=[ <Mean>, <Standard Deviation>, <Cumulative Probability> ]
InversePascal.Syntax=[ <n>, <p>, <Waarskynlikheid> ]
InversePoisson.Syntax=[ <Mean>, <Waarskynlikheid> ]
InverseTDistribution.Syntax=[ <Degrees of Freedom>, <Waarskynlikheid> ]
InverseWeibull.Syntax=[ <Shape>, <Scale>, <Waarskynlikheid> ]
InverseZipf.Syntax=[ <Number of Elements>, <Exponent>, <Waarskynlikheid> ]
Invert.Syntax=[ <Matriks> ]\n[ <Function> ]
IsFactored.Syntax=[ <Polinoom> ]
IsInRegion.Syntax=[ <Punt>, <Region> ]
IsInteger.Syntax=[ <Number> ]
IsPrime.Syntax=[ <Number> ]
IsTangent.Syntax=[ <Lyn>, <Keël> ]
IsVertexForm.Syntax=[ <Function> ]
Iteration.Syntax=[ <Function>, <Begin Waarde>, <Number of Iterations> ]\n[ <Uitdrukking>, <Variables>, <Start Values>, <Count> ]
IterationList.Syntax=[ <Function>, <Begin Waarde>, <Number of Iterations> ]\n[ <Uitdrukking>, <Variables>, <Start Values>, <Count> ]
IterationList.SyntaxCAS=[ <Function>, <Begin Waarde>, <Number of Iterations> ]
Join.Syntax=[ <List of Lists> ]\n[ <Lys>, <Lys>, ... ]
JordanDiagonalization.SyntaxCAS=[ <Matriks> ]
KeepIf.Syntax=[ <Condition>, <Lys> ]\n[ <Condition>, <Veranderlike>, <Lys> ]
LCM.Syntax=[ <List of Numbers> ]\n[ <Number>, <Number> ]
LCM.SyntaxCAS=[ <List of Numbers> ]\n[ <List of Polynomials> ]\n[ <Number>, <Number> ]\n[ <Polinoom>, <Polinoom> ]
LUDecomposition.Syntax=[ <Matriks> ]
LaTeX.Syntax=[ <Objek> ]\n[ <Objek>, <Boolean for Substitution of Variables> ]\n[ <Objek>, <Boolean for Substitution of Variables>, <Boolean Show Name> ]
Laplace.Syntax=[ <Function> ]\n[ <Function>, <Veranderlike> ]\n[ <Function>, <Veranderlike>, <Veranderlike> ]
Last.Syntax=[ <Lys> ]\n[ <Text> ]\n[ <Lys>, <Number of Elements> ]\n[ <Text>, <Number of Elements> ]
Last.SyntaxCAS=[ <Lys> ]\n[ <Lys>, <Number of Elements> ]
LeftSide=IcalaLasekhohlo
LeftSide.Syntax=[ <Equation> ]
LeftSide.SyntaxCAS=[ <Equation> ]\n[ <List of Equations> ]\n[ <List of Equations>, <Index> ]
LeftSum.Syntax=[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles> ]
Length.Syntax=[ <Objek> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Start Point>, <End Point> ]\n[ <Curve>, <Start t-Value>, <End t-Value> ]\n[ <Curve>, <Start Point>, <End Point> ]
Length.SyntaxCAS=[ <Lys> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Veranderlike>, <Start x-Value>, <End x-Value> ]
LetterToUnicode.Syntax=[ <Letter> ]
Limit.Syntax=[ <Function>, <Ixabiso> ]
Limit.SyntaxCAS=[ <Uitdrukking>, <Ixabiso> ]\n[ <Uitdrukking>, <Veranderlike>, <Ixabiso> ]
LimitAbove.Syntax=[ <Function>, <Ixabiso> ]
LimitAbove.SyntaxCAS=[ <Uitdrukking>, <Ixabiso> ]\n[ <Uitdrukking>, <Veranderlike>, <Ixabiso> ]
LimitBelow.Syntax=[ <Function>, <Ixabiso> ]
LimitBelow.SyntaxCAS=[ <Uitdrukking>, <Ixabiso> ]\n[ <Uitdrukking>, <Veranderlike>, <Ixabiso> ]
Line.Syntax=[ <Punt>, <Punt> ]\n[ <Punt>, <Parallel Line> ]\n[ <Punt>, <Direction Vector> ]
LineBisector.Syntax=[ <Segment> ]\n[ <Punt>, <Punt> ]
LineBisector.Syntax3D=[ <Segment> ]\n[ <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Direction> ]
LineGraph.Syntax=[ <List of x-coordinates>, <List of y-coordinates> ]
Locus.Syntax=[ <Point Creating Locus Line>, <Punt> ]\n[ <Point Creating Locus Line>, <Slider> ]\n[ <Slopefield>, <Punt> ]\n[ <f(x, y)>, <Punt> ]
LocusEquation.Syntax=[ <Locus> ]\n[ <Locus Point>, <Moving Point> ]\n[ <Boolean Expression>, <Moving Point> ]
LogNormal.Syntax=[ <Mean>, <Standard Deviation>, <Variable Value> ]\n[ <Mean>, <Standard Deviation>, <Variable Value>, <Boolean Kumulatief>  ]\n[ <Mean>, <Standard Deviation>, x, <Boolean Kumulatief> ]
Logistic.Syntax=[ <Mean>, <Scale>, <Variable Value> ]\n[ <Mean>, <Scale>, <Variable Value>, <Boolean Kumulatief>  ]\n[ <Mean>, <Scale>, x, <Boolean Kumulatief> ]
LowerSum.Syntax=[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles> ]
MatrixRank.Syntax=[ <Matriks> ]
Max.Syntax=[ <Interval> ]\n[ <Number>, <Number> ]\n[ <Lys> ]\n[ <Lys van Data>, <Lys van Frekwensies> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Max.SyntaxCAS=[ <Lys> ]\n[ <Interval> ]\n[ <Number>, <Number> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Lys van Data>, <Lys van Frekwensies> ]
Maximize.Syntax=[ <Dependent Number>, <Free Number> ]\n[ <Dependent Number>, <Point on Path> ]
Mean.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
MeanX.Syntax=[ <Lys van Punte> ]
MeanY.Syntax=[ <Lys van Punte> ]
Median.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
Median.SyntaxCAS=[ <List of Numbers> ]
Midpoint.Syntax=[ <Segment> ]\n[ <Keël> ]\n[ <Interval> ]\n[ <Punt>, <Punt> ]
Min.Syntax=[ <Interval> ]\n[ <Number>, <Number> ]\n[ <Lys> ]\n[ <Lys van Data>, <Lys van Frekwensies> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Min.SyntaxCAS=[ <Lys> ]\n[ <Interval> ]\n[ <Number>, <Number> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Lys van Data>, <Lys van Frekwensies> ]
MinimalPolynomial.Syntax=[ <Matriks> ]
Minimize.Syntax=[ <Dependent Number>, <Free Number> ]\n[ <Dependent Number>, <Point on Path> ]
MinimumSpanningTree.Syntax=[ <Lys van Punte> ]
Mirror.Syntax=[ <Objek>, <Punt> ]\n[ <Objek>, <Lyn> ]\n[ <Objek>, <Sirkel> ]
Mirror.Syntax3D=[ <Objek>, <Punt> ]\n[ <Objek>, <Lyn> ]\n[ <Objek>, <Plane> ]\n[ <Objek>, <Sirkel> ]
MixedNumber.SyntaxCAS=[ <Number> ]
Mod.Syntax=[ <Dividend Number>, <Divisor Number> ]\n[ <Dividend Polynomial>, <Divisor Polynomial> ]
Mode.Syntax=[ <List of Numbers> ]
ModularExponent.Syntax=[ <Number>, <Number>, <Number> ]
NDerivative.Syntax=[ <Function> ]\n[ <Function>, <Order> ]
NIntegral.Syntax=[ <Function> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Start x-Value>, <Start y-Value>, <End x-Value> ]
NIntegral.SyntaxCAS=[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Veranderlike>, <Begin Waarde>, <Eind Waarde> ]
NInvert.Syntax=[ <Function> ]
NSolutions.Syntax=[ <Equation> ]
NSolutions.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Veranderlike> ]\n[ <Equation>, <Variable = starting value> ]\n[ <List of Equations>, <List of Variables> ]
NSolve.Syntax=[ <Equation> ]
NSolve.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Veranderlike> ]\n[ <Equation>, <Variable = starting value> ]\n[ <List of Equations>, <List of Variables> ]
NSolveODE.Syntax=[ <List of Derivatives>, <Initial x-coordinate>, <List of Initial y-coordinates>, <Final x-coordinate> ]
Name.Syntax=[ <Objek> ]
Net.Syntax=[ <Polyhedron>, <Number> ]\n[ <Polyhedron>, <Number>, <Face>, <Edge>, <Edge>, ... ]
NextPrime.Syntax=[ <Number> ]
Normal.Syntax=[ <Mean>, <Standard Deviation>, <Variable Value> ]\n[ <Mean>, <Standard Deviation>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Mean>, <Standard Deviation>, x, <Boolean Kumulatief> ]
NormalQuantilePlot.Syntax=[ <Lys van Rou Data> ]
Normalize.Syntax=[ <List of Numbers> ]\n[ <Lys van Punte> ]
Numerator.Syntax=[ <Number> ]\n[ <Function> ]
Numerator.SyntaxCAS=[ <Uitdrukking> ]
Numeric.SyntaxCAS=[ <Uitdrukking> ]\n[ <Uitdrukking>, <Significant Figures> ]
Object.Syntax=[ <Name of Object as Text> ]
Octahedron.Syntax=[ <Equilateral Triangle> ]\n[ <Punt>, <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Direction> ]
Ordinal.Syntax=[ <Integer> ]
OrdinalRank.Syntax=[ <Lys> ]
OrthogonalLine.Syntax=[ <Punt>, <Lyn> ]\n[ <Punt>, <Segment> ]\n[ <Punt>, <Vektor> ]
OrthogonalLine.Syntax3D=[ <Punt>, <Lyn> ]\n[ <Punt>, <Segment> ]\n[ <Punt>, <Vektor> ]\n[ <Punt>, <Plane> ]\n[ <Lyn>, <Lyn> ]\n[ <Punt>, <Direction>, <Direction> ]\n[ <Punt>, <Lyn>, <Context> ]
OrthogonalPlane.Syntax=[ <Punt>, <Lyn> ]\n[ <Punt>, <Vektor> ]
OrthogonalVector.Syntax=[ <Lyn> ]\n[ <Segment> ]\n[ <Vektor> ]
OrthogonalVector.Syntax3D=[ <Lyn> ]\n[ <Segment> ]\n[ <Vektor> ]\n[ <Plane> ]
OrthogonalVector.SyntaxCAS=[ <Vektor> ]
OsculatingCircle.Syntax=[ <Punt>, <Objek> ]
PMCC.Syntax=[ <Lys van Punte> ]\n[ <List of x-coordinates>, <List of y-coordinates> ]
Pan.Syntax=[ <x>, <y> ]
Pan.Syntax3D=[ <x>, <y> ]\n[ <x>, <y>, <z> ]
Parabola.Syntax=[ <Punt>, <Lyn> ]
Parameter.Syntax=[ <Parabola> ]
ParametricDerivative.Syntax=[ <Curve> ]
ParseToFunction.Syntax=[ <Function>, <String> ]
ParseToNumber.Syntax=[ <Number>, <String> ]
PartialFractions.Syntax=[ <Function> ]
PartialFractions.SyntaxCAS=[ <Function> ]\n[ <Function>, <Veranderlike> ]
Pascal.Syntax=[ <n>, <p> ]\n[ <n>, <p>, <Boolean Kumulatief> ]\n[ <n>, <p>, <Variable Value>, <Boolean Kumulatief> ]
Pascal.SyntaxCAS=[ <n>, <p>, <Variable Value>, <Boolean Kumulatief> ]
PathParameter.Syntax=[ <Point On Path> ]
Payment.Syntax=[ <Rate>, <Number of Periods>, <Present Value>, <Future Value (optional)>, <Type (optional)> ]
PenStroke.Syntax=[ <Punt>, ..., <Punt> ]
Percentile.Syntax=[ <List of Numbers>, <Percent> ]
Perimeter.Syntax=[ <Poligoon> ]\n[ <Keël> ]\n[ <Locus> ]
Periods.Syntax=[ <Rate>, <Payment>, <Present Value>, <Future Value (optional)>, <Type (optional)> ]
PieChart.Syntax=[ <Lys van Frekwensies> ]\n[ <Lys van Frekwensies>, <Center>, <Radius> ]
Plane.Syntax=[ <Poligoon> ]\n[ <Keël> ]\n[ <Punt>, <Plane> ]\n[ <Punt>, <Lyn> ]\n[ <Lyn>, <Lyn> ]\n[ <Punt>, <Punt>, <Punt> ]\n[ <Punt>, <Vektor>, <Vektor> ]
PlaneBisector.Syntax=[ <Segment> ]\n[ <Punt>, <Punt> ]
PlaySound.Syntax=[ <URL> ]\n[ <Boolean Play> ]\n[ <Function>, <Min Value>, <Max Value> ]\n[ <Function>, <Min Value>, <Max Value>, <Sample Rate>, <Sample Depth> ]
PlotSolve.Syntax=[ <Equation in x> ]
Point.Syntax=[ <Objek> ]\n[ <Objek>, <Parameter> ]\n[ <Punt>, <Vektor> ]\n[ <Lys> ]
PointIn.Syntax=[ <Region> ]
PointList.Syntax=[ <Lys> ]
Poisson.Syntax=[ <Mean> ]\n[ <Mean>, <Boolean Kumulatief> ]\n[ <Mean>, <Variable Value>, <Boolean Kumulatief> ]
Poisson.SyntaxCAS=[ <Mean>, <Variable Value>, <Boolean Kumulatief> ]
Polar.Syntax=[ <Punt>, <Keël> ]\n[ <Lyn>, <Keël> ]
PolyLine.Syntax=[ <Lys van Punte> ]\n[ <Punt>, ..., <Punt> ]
Polygon.Syntax=[ <Lys van Punte> ]\n[ <Punt>, ..., <Punt> ]\n[ <Punt>, <Punt>, <Number of Vertices> ]
Polygon.Syntax3D=[ <Lys van Punte> ]\n[ <Punt>, ..., <Punt> ]\n[ <Punt>, <Punt>, <Number of Vertices> ]\n[ <Punt>, <Punt>, <Number of Vertices>, <Direction> ]
Polynomial.Syntax=[ <Function> ]\n[ <Lys van Punte> ]
Polynomial.SyntaxCAS=[ <Function> ]\n[ <Function>, <Veranderlike> ]
PresentValue.Syntax=[ <Rate>, <Number of Periods>, <Payment>, <Future Value (optional)>, <Type (optional)> ]
PreviousPrime.Syntax=[ <Number> ]
PrimeFactors.Syntax=[ <Number> ]
Prism.Syntax=[ <Poligoon>, <Punt> ]\n[ <Poligoon>, <Height value> ]\n[ <Punt>, <Punt>, ... ]
Product.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Number of Elements> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]\n[ <Uitdrukking>, <Veranderlike>, <Begin Waarde>, <Eind Waarde> ]
Product.SyntaxCAS=[ <Uluhlu lwemithetho yeAljibra> ]\n[ <Uitdrukking>, <Veranderlike>, <Start Index>, <End Index> ]
Prove.Syntax=[ <Boolean Expression> ]
ProveDetails.Syntax=[ <Boolean Expression> ]
Pyramid.Syntax=[ <Poligoon>, <Punt> ]\n[ <Poligoon>, <Height> ]\n[ <Punt>, <Punt>, <Punt>, <Punt>, ... ]
Q1.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
Q3.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
QRDecomposition.Syntax=[ <Matriks> ]
QuadricSide.Syntax=[ <Kwadriek> ]
RSquare.Syntax=[ <Lys van Punte>, <Function> ]
Radius.Syntax=[ <Keël> ]
Random.Syntax=[ <Minimum Integer>, <Maximum Integer> ]\n[ <Minimum Integer>, <Maximum Integer>, <Number of Samples> ]\n[ <Minimum Integer>, <Maximum Integer>, <Boolean Fixed> ]
Random.SyntaxCAS=[ <Minimum Integer>, <Maximum Integer> ]\n[ <Minimum Integer>, <Maximum Integer>, <Number of Samples> ]
RandomBinomial.Syntax=[ <Aantal Eksperimente>, <Waarskynlikheid> ]
RandomDiscrete.Syntax=[ <Lys>, <Lys> ]
RandomElement.Syntax=[ <Lys> ]
RandomNormal.Syntax=[ <Mean>, <Standard Deviation> ]
RandomPointIn.Syntax=[ <Region> ]\n[ <Lys van Punte> ]\n[ <xMin>, <xMax>, <yMin>, <yMax> ]
RandomPoisson.Syntax=[ <Mean> ]
RandomPolynomial.Syntax=[ <Degree>, <Minimum for Coefficients>, <Maximum for Coefficients> ]
RandomPolynomial.SyntaxCAS=[ <Degree>, <Minimum for Coefficients>, <Maximum for Coefficients> ]\n[ <Veranderlike>, <Degree>, <Minimum for Coefficients>, <Maximum for Coefficients> ]
RandomUniform.Syntax=[ <Min>, <Max> ]\n[ <Min>, <Max>, <Number of Samples> ]
Rate.Syntax=[ <Number of Periods>, <Payment>, <Present Value>, <Future Value (optional)>, <Type (optional)>, <Guess (optional)> ]
Rationalize.SyntaxCAS=[ <Number> ]
Ray.Syntax=[ <Start Point>, <Punt> ]\n[ <Start Point>, <Direction Vector> ]
ReadText.Syntax=[ <Text> ]
RectangleSum.Syntax=[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles>, <Position for rectangle start> ]
ReducedRowEchelonForm.Syntax=[ <Matriks> ]
Relation.Syntax=[ <Lys> ]\n[ <Objek>, <Objek> ]
RemovableDiscontinuity.Syntax=[ <Function> ]
Remove.Syntax=[ <Lys>, <Lys> ]
RemoveUndefined.Syntax=[ <Lys> ]
Rename.Syntax=[ <Objek>, <Name> ]
Repeat.Syntax=[ <Number>, <Scripting Command>, <Scripting Command>, ... ]
ReplaceAll.Syntax=[ <Text>, <Text to Match>, <Text to Replace> ]
ResidualPlot.Syntax=[ <Lys van Punte>, <Function> ]
Reverse.Syntax=[ <Lys> ]
RightSide.Syntax=[ <Equation> ]
RightSide.SyntaxCAS=[ <Equation> ]\n[ <List of Equations> ]\n[ <List of Equations>, <Index> ]
RigidPolygon.Syntax=[ <Poligoon> ]\n[ <Poligoon>, <Offset x>, <Offset y> ]\n[ <Free Point>, ..., <Free Point> ]
Root.Syntax=[ <Polinoom> ]\n[ <Function>, <Initial x-Value> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Root.SyntaxCAS=[ <Polinoom> ]
RootList.Syntax=[ <Lys> ]
RootMeanSquare.Syntax=[ <List of Numbers> ]
Roots.Syntax=[ <Function>, <Start x-Value>, <End x-Value> ]
Rotate.Syntax=[ <Objek>, <Hoek> ]\n[ <Objek>, <Hoek>, <Punt> ]
Rotate.Syntax3D=[ <Objek>, <Hoek> ]\n[ <Objek>, <Hoek>, <Punt> ]\n[ <Objek>, <Hoek>, <Axis of Rotation> ]\n[ <Objek>, <Hoek>, <Point on Axis>, <Axis Direction or Plane> ]
RotateText.Syntax=[ <Text>, <Hoek> ]
Row.Syntax=[ <Sigblad Sel> ]
RunClickScript.Syntax=[ <Objek> ]
RunUpdateScript.Syntax=[ <Objek> ]
SDX.Syntax=[ <Lys van Punte> ]
SDY.Syntax=[ <Lys van Punte> ]
SVD.Syntax=[ <Matriks> ]
SXX.Syntax=[ <List of Numbers> ]\n[ <Lys van Punte> ]
SXY.Syntax=[ <Lys van Punte> ]\n[ <List of Numbers>, <List of Numbers> ]
SYY.Syntax=[ <Lys van Punte> ]
Sample.Syntax=[ <Lys>, <Size> ]\n[ <Lys>, <Size>, <With Replacement> ]
SampleSD.SyntaxCAS=[ <List of Numbers> ]
SampleSDX.Syntax=[ <Lys van Punte> ]
SampleSDY.Syntax=[ <Lys van Punte> ]
SampleVariance.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
SampleVariance.SyntaxCAS=[ <List of Numbers> ]
ScientificText.Syntax=[ <Number> ]\n[ <Number>, <Precision> ]
SecondAxis.Syntax=[ <Keël> ]
SecondAxisLength.Syntax=[ <Keël> ]
Sector.Syntax=[ <Keël>, <Punt>, <Punt> ]\n[ <Keël>, <Parameter Waarde>, <Parameter Waarde> ]
Segment.Syntax=[ <Punt>, <Punt> ]\n[ <Punt>, <Length> ]
SelectObjects.Syntax=[ ]\n[ <Objek>, <Objek>, ... ]
SelectedElement.Syntax=[ <Lys> ]
SelectedIndex.Syntax=[ <Lys> ]
Semicircle.Syntax=[ <Punt>, <Punt> ]
Sequence.Syntax=[ <Eind Waarde> ]\n[ <Begin Waarde>, <Eind Waarde> ]\n[ <Begin Waarde>, <Eind Waarde>, <Increment> ]\n[ <Uitdrukking>, <Veranderlike>, <Begin Waarde>, <Eind Waarde> ]\n[ <Uitdrukking>, <Veranderlike>, <Begin Waarde>, <Eind Waarde>, <Increment> ]
SetActiveView.Syntax=[ <View> ]\n[ <Plane> ]
SetAxesRatio.Syntax=[ <Number>, <Number> ]
SetAxesRatio.Syntax3D=[ <Number>, <Number> ]\n[ <Number>, <Number>, <Number> ]
SetBackgroundColor.Syntax=[ <Color> ]\n[ <Objek>, <Color> ]\n[ <Red>, <Green>, <Blue> ]\n[ <Objek>, <Red>, <Green>, <Blue> ]
SetCaption.Syntax=[ <Objek>, <Text> ]
SetColor.Syntax=[ <Objek>, <Color> ]\n[ <Objek>, <Red>, <Green>, <Blue> ]
SetConditionToShowObject.Syntax=[ <Objek>, <Condition> ]
SetConstructionStep.Syntax=[ <Number> ]
SetCoords.Syntax=[ <Objek>, <x>, <y> ]\n[ <Objek>, <x>, <y>, <z> ]
SetDecoration.Syntax=[ <Objek>, <Number> ]\n[ <Segment>, <Number>, <Number>]
SetDynamicColor.Syntax=[ <Objek>, <Red>, <Green>, <Blue> ]\n[ <Objek>, <Red>, <Green>, <Blue>, <Opacity> ]
SetFilling.Syntax=[ <Objek>, <Number> ]
SetFixed.Syntax=[ <Objek>, <true | false> ]\n[ <Objek>, <true | false>, <true | false> ]
SetImage.Syntax=[ <Objek>, <Image> ]\n[ <Objek>, <Text> ]
SetLabelMode.Syntax=[ <Objek>, <Number> ]
SetLayer.Syntax=[ <Objek>, <Layer> ]
SetLevelOfDetail.Syntax=[ <Surface>, <Level of Detail> ]
SetLineStyle.Syntax=[ <Objek>, <Number> ]
SetLineThickness.Syntax=[ <Objek>, <Number> ]
SetPerspective.Syntax=[ <Text> ]
SetPointSize.Syntax=[ <Objek>, <Number> ]
SetPointStyle.Syntax=[ <Punt>, <Number> ]
SetSeed.Syntax=[ <Integer> ]
SetSpinSpeed.Syntax=[ <Number> ]
SetTooltipMode.Syntax=[ <Objek>, <Number> ]
SetTrace.Syntax=[ <Objek>, <true | false> ]
SetValue.Syntax=[ <Boolean>, <0|1> ]\n[ <Objek>, <Objek> ]\n[ <Lys>, <Number>, <Objek> ]
SetViewDirection.Syntax=[ ]\n[ <Direction> ]\n[ <Direction>, <Boolean animate> ]
SetVisibleInView.Syntax=[ <Objek>, <View Number 1|2>, <Boolean> ]
Shear.Syntax=[ <Objek>, <Lyn>, <Ratio> ]
ShortestDistance.Syntax=[ <List of Segments>, <Start Point>, <End Point>, <Boolean Weighted> ]
ShowAxes.Syntax=[]\n[ <Boolean> ]\n[ <View>, <Boolean> ]
ShowGrid.Syntax=[]\n[ <Boolean> ]\n[ <View>, <Boolean> ]
ShowLabel.Syntax=[ <Objek>, <Boolean> ]
ShowLayer.Syntax=[ <Number> ]
Shuffle.Syntax=[ <Lys> ]
SigmaXX.Syntax=[ <Lys van Punte> ]\n[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
SigmaXY.Syntax=[ <Lys van Punte> ]\n[ <List of x-coordinates>, <List of y-coordinates> ]
SigmaYY.Syntax=[ <Lys van Punte> ]
Simplify.Syntax=[ <Function> ]\n[ <Text> ]
Simplify.SyntaxCAS=[ <Function> ]
Slider.Syntax=[ <Min>, <Max>, <Increment>, <Speed>, <Width>, <Is Angle>, <Horizontal>, <Animating>, <Random> ]
Slope.Syntax=[ <Lyn> ]
SlopeField.Syntax=[ <f(x, y)> ]\n[ <f(x, y)>, <Getal n> ]\n[ <f(x, y)>, <Getal n>, <Length Multiplier a> ]\n[ <f(x, y)>, <Getal n>, <Length Multiplier a>, <Min x>, <Min y>, <Max x>, <Max y> ]
SlowPlot.Syntax=[ <Function> ]\n[ <Function>, <Boolean Repeat> ]
Solutions.Syntax=[ <Equation> ]
Solutions.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Veranderlike> ]\n[ <List of Equations>, <List of Variables> ]
Solve.Syntax=[ <Equation> ]
Solve.SyntaxCAS=[ <Equation in x> ]\n[ <Equation>, <Veranderlike> ]\n[ <List of Equations>, <List of Variables> ]\n[ <List of Parametric Equations>, <List of Variables> ]\n[ <Equation>, <Veranderlike>, <List of assumptions> ]
SolveCubic.SyntaxCAS=[ <Cubic Polynomial> ]
SolveODE.Syntax=[ <f'(x, y)> ]\n[ <f'(x, y)>, <Point on f> ]\n[ <f'(x, y)>, <Start x>, <Start y>, <End x>, <Step> ]\n[ <y'>, <x'>, <Start x>, <Start y>, <End t>, <Step> ]\n[ <b(x)>, <c(x)>, <f(x)>, <Start x>, <Start y>, <Start y'>, <End x>, <Step> ]
SolveODE.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Point(s) on f> ]\n[ <Equation>, <Point(s) on f>, <Point(s) on f'> ]\n[ <Equation>, <Dependent Variable>, <Independent Variable>, <Point(s) on f> ] \n[ <Equation>, <Dependent Variable>, <Independent Variable>, <Point(s) on f>, <Point(s) on f'> ]
SolveQuartic.SyntaxCAS=[ <Quartic Polynomial> ]
Sort.Syntax=[ <Lys> ]\n[ <Values>, <Keys> ]
Spearman.Syntax=[ <Lys van Punte> ]\n[ <List of Numbers>, <List of Numbers> ]
Sphere.Syntax=[ <Punt>, <Radius> ]\n[ <Punt>, <Punt> ]
Spline.Syntax=[ <Lys van Punte> ]\n[ <Lys van Punte>, <Order ≥ 3> ]\n[ <Lys van Punte>, <Order ≥ 3>, <Weight Function> ]
Split.Syntax=[ <Text>, <List of Texts to split on> ]
StartAnimation.Syntax=[ ]\n[ <Boolean> ]\n[ <Slider or Point>, <Slider or Point>, ... ]\n[ <Slider or Point>, <Slider or Point>, ..., <Boolean> ]
StartRecord.Syntax=[ ]\n[ <Boolean> ]
StemPlot.Syntax=[ <Lys> ]\n[ <Lys>, <Adjustment -1|0|1> ]
StepGraph.Syntax=[ <Lys van Punte> ]\n[ <Lys van Punte>, <Boolean Join> ]\n[ <List of x-coordinates>, <List of y-coordinates> ]\n[ <Lys van Punte>, <Boolean Join>, <Point Style> ]\n[ <List of x-coordinates>, <List of y-coordinates>, <Boolean Join> ]\n[ <List of x-coordinates>, <List of y-coordinates>, <Boolean Join>, <Point Style> ]
StickGraph.Syntax=[ <Lys van Punte> ]\n[ <Lys van Punte>, <Boolean Horizontal> ]\n[ <List of x-coordinates>, <List of y-coordinates> ]\n[ <List of x-coordinates>, <List of y-coordinates>, <Boolean Horizontal> ]
Stretch.Syntax=[ <Objek>, <Vektor> ]\n[ <Objek>, <Lyn>, <Ratio> ]
Substitute.SyntaxCAS=[ <Uitdrukking>, <Substitution List> ]\n[ <Uitdrukking>, <from>, <to> ]
Sum.Syntax=[ <Lys> ]\n[ <Lys>, <Number of Elements> ]\n[ <Lys>, <Lys van Frekwensies> ]\n[ <Uitdrukking>, <Veranderlike>, <Begin Waarde>, <Eind Waarde> ]
Sum.SyntaxCAS=[ <Lys> ]\n[ <Uitdrukking>, <Veranderlike>, <Begin Waarde>, <Eind Waarde> ]
SumSquaredErrors.Syntax=[ <Lys van Punte>, <Function> ]
SurdText.Syntax=[ <Punt> ]\n[ <Number> ]\n[ <Number>, <Lys> ]
Surface.Syntax=[ <Function>, <Hoek> ]\n[ <Curve>, <Hoek>, <Lyn> ]\n[ <Uitdrukking>, <Uitdrukking>, <Uitdrukking>, <Parameter Variable 1>, <Begin Waarde>, <Eind Waarde>, <Parameter Variable 2>, <Begin Waarde>, <Eind Waarde> ]
TDistribution.Syntax=[ <Degrees of Freedom>, <Variable Value> ]\n[ <Degrees of Freedom>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Degrees of Freedom>, x, <Boolean Kumulatief> ]
TDistribution.SyntaxCAS=[ <Degrees of Freedom>, <Variable Value> ]
TMean2Estimate.Syntax=[ <List of Sample Data 1>, <List of Sample Data 2>, <Confidence Level>, <Boolean Pooled> ]\n[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2>, <Sample Size 2>, <Confidence Level>, <Boolean Pooled> ]
TMeanEstimate.Syntax=[ <List of Sample Data>, <Confidence Level> ]\n[ <Sample Mean>, <Sample Standard Deviation>, <Sample Size>, <Confidence Level> ]
TTest.Syntax=[ <List of Sample Data>, <Hypothesized Mean>, <Tail> ]\n[ <Sample Mean>, <Sample Standard Deviation>, <Sample Size>, <Hypothesized Mean>, <Tail> ]
TTest2.Syntax=[ <List of Sample Data 1>, <List of Sample Data 2>, <Tail>, <Boolean Pooled> ]\n[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2>, <Sample Size 2>, <Tail>, <Boolean Pooled> ]
TTestPaired.Syntax=[ <List of Sample Data 1>, <List of Sample Data 2>, <Tail> ]
TableText.Syntax=[ <Lys>, <Lys>, ... ]\n[ <Lys>, <Lys>, ..., <Alignment of Text> ]\n[ <Lys>, <Lys>, ..., <Alignment of Text>, <Minimum Cell Width> ]\n[ <Lys>, <Lys>, ..., <Alignment of Text>, <Minimum Cell Width>, <Minimum Cell Height> ]
Take.Syntax=[ <Lys>, <Start Position>, <End Position> ]\n[ <Lys>, <Start Position> ]\n[ <Text>, <Start Position>, <End Position> ]\n[ <Text>, <Start Position> ]
Take.SyntaxCAS=[ <Lys>, <Start Position> ]\n[ <Lys>, <Start Position>, <End Position> ]\n[ <Text>, <Start Position>, <End Position> ]\n[ <Text>, <Start Position> ]
Tangent.Syntax=[ <Punt>, <Keël> ]\n[ <Punt>, <Function> ]\n[ <Point on Curve>, <Curve> ]\n[ <x-Value>, <Function> ]\n[ <Lyn>, <Keël> ]\n[ <Keël>, <Keël> ]
Tangent.SyntaxCAS=[ <Number>, <Function> ]\n[ <Punt>, <Objek> ]
TaylorSeries.Syntax=[ <Function>, <x-Value>, <Order Number> ]
TaylorSeries.SyntaxCAS=[ <Uitdrukking>, <x-Value>, <Order Number> ]\n[ <Uitdrukking>, <Veranderlike>, <Variable Value>, <Order Number> ]
Tetrahedron.Syntax=[ <Equilateral Triangle> ]\n[ <Punt>, <Punt>, <Punt> ]\n[ <Punt>, <Punt>, <Direction> ]
Text.Syntax=[ <Objek> ]\n[ <Objek>, <Boolean for Substitution of Variables> ]\n[ <Objek>, <Punt> ]\n[ <Objek>, <Punt>, <Boolean for Substitution of Variables> ]\n[ <Objek>, <Punt>, <Boolean for Substitution of Variables>, <Boolean for LaTeX formula> ]\n[ <Objek>, <Punt>, <Boolean for Substitution of Variables>, <Boolean for LaTeX formula>, <Horizontal alignment -1|0|1> ]\n[ <Objek>, <Punt>, <Boolean for Substitution of Variables>, <Boolean for LaTeX formula>, <Horizontal alignment -1|0|1>, <Vertical alignment -1|0|1> ]
TextToUnicode.Syntax=[ <Text> ]
Textfield.Syntax=[ <Linked Object> ]
TiedRank.Syntax=[ <Lys> ]
ToBase.Syntax=[ <Number>, <Base> ]
ToComplex.Syntax=[ <Vektor> ]
ToExponential.SyntaxCAS=[ <Complex Number> ]
ToPoint.Syntax=[ <Complex Number> ]
ToPolar.Syntax=[ <Complex Number> ]\n[ <Vektor> ]
ToolImage.Syntax=[ <Number> ]\n[ <Number>, <Punt> ]\n[ <Number>, <Punt>, <Punt> ]
Top.Syntax=[ <Kwadriek> ]
Translate.Syntax=[ <Objek>, <Vektor> ]\n[ <Vektor>, <Start Point> ]
Transpose.Syntax=[ <Matriks> ]
TrapezoidalSum.Syntax=[ <Function>, <Start x-Value>, <End x-Value>, <Number of Trapezoids> ]
TravelingSalesman.Syntax=[ <Lys van Punte> ]
TriangleCenter.Syntax=[ <Punt>, <Punt>, <Punt>, <Number> ]
TriangleCurve.Syntax=[ <Punt>, <Punt>, <Punt>, <Equation> ]
Triangular.Syntax=[ <Lower Bound>, <Upper Bound>, <Mode>, <Variable Value> ]\n[ <Lower Bound>, <Upper Bound>, <Mode>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Lower Bound>, <Upper Bound>, <Mode>, x, <Boolean Kumulatief> ]
TrigCombine.Syntax=[ <Uitdrukking> ]\n[ <Uitdrukking>, <Target Function> ]
TrigExpand.Syntax=[ <Uitdrukking> ]\n[ <Uitdrukking>, <Target Function> ]
TrigExpand.SyntaxCAS=[ <Uitdrukking> ]\n[ <Uitdrukking>, <Target Function> ]\n[ <Uitdrukking>, <Target Function>, <Target Variable> ]\n[ <Uitdrukking>, <Target Function>, <Target Variable>, <Target Variable> ]
TrigSimplify.Syntax=[ <Uitdrukking> ]
Trilinear.Syntax=[ <Punt>, <Punt>, <Punt>, <Number>, <Number>, <Number> ]
TurningPoint.Syntax=[ <Polinoom> ]
TurningPoint.SyntaxCAS=[ <Function> ]
Turtle.Syntax=[]
TurtleBack.Syntax=[ <Turtle>, <Distance> ]
TurtleDown.Syntax=[ <Turtle> ]
TurtleForward.Syntax=[ <Turtle>, <Distance> ]
TurtleLeft.Syntax=[ <Turtle>, <Hoek> ]
TurtleRight.Syntax=[ <Turtle>, <Hoek> ]
TurtleUp.Syntax=[ <Turtle> ]
Type.Syntax=[ <Objek> ]
UnicodeToLetter.Syntax=[ <Integer> ]
UnicodeToText.Syntax=[ <List of Integers> ]
Uniform.Syntax=[ <Lower Bound>, <Upper Bound>, <Variable Value> ]\n[ <Lower Bound>, <Upper Bound>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Lower Bound>, <Upper Bound>, x, <Boolean Kumulatief> ]
Union.Syntax=[ <Lys>, <Lys> ]\n[ <Poligoon>, <Poligoon> ]
Unique.Syntax=[ <Lys> ]
UnitOrthogonalVector.Syntax=[ <Lyn> ]\n[ <Segment> ]\n[ <Vektor> ]
UnitOrthogonalVector.Syntax3D=[ <Lyn> ]\n[ <Segment> ]\n[ <Vektor> ]\n[ <Plane> ]
UnitOrthogonalVector.SyntaxCAS=[ <Vektor> ]
UnitVector.Syntax=[ <Objek> ]
UnitVector.SyntaxCAS=[ <Vektor> ]
UpdateConstruction.Syntax=[ ]\n[ <Number of times> ]
UpperSum.Syntax=[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles> ]
Variance.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
Vector.Syntax=[ <Punt> ]\n[ <Start Point>, <End Point> ]
Vertex.Syntax=[ <Keël> ]\n[ <Inequality> ]\n[ <Poligoon> ]\n[ <Poligoon>, <Index> ]\n[ <Segment>, <Index> ]
VerticalText.Syntax=[ <Text> ]\n[ <Text>, <Punt> ]
Volume.Syntax=[ <Solid> ]
Voronoi.Syntax=[ <Lys van Punte> ]
Weibull.Syntax=[ <Shape>, <Scale>, <Variable Value> ]\n[ <Shape>, <Scale>, <Variable Value>, <Boolean Kumulatief> ]\n[ <Shape>, <Scale>, x, <Boolean Kumulatief> ]
Weibull.SyntaxCAS=[ <Shape>, <Scale>, <Variable Value> ]
ZMean2Estimate.Syntax=[ <List of Sample Data 1>, <List of Sample Data 2>, <σ1>, <σ2>, <Confidence Level> ]\n[ <Sample Mean 1>, <σ1>, <Sample Size 1>, <Sample Mean 2>, <σ2>, <Sample Size 2>, <Confidence Level> ]
ZMean2Test.Syntax=[ <List of Sample Data 1>, <σ1>, <List of Sample Data 2>, <σ2>, <Tail> ]\n[ <Sample Mean 1>, <σ1>, <Sample Size 1>, <Sample Mean 2>, <σ2>, <Sample Size 2>, <Tail> ]
ZMeanEstimate.Syntax=[ <List of Sample Data>, <σ>, <Confidence Level> ]\n[ <Sample Mean>, <σ>, <Sample Size>, <Confidence Level> ]
ZMeanTest.Syntax=[ <List of Sample Data>, <σ>, <Hypothesized Mean>, <Tail> ]\n[ <Sample Mean>, <σ>, <Sample Size>, <Hypothesized Mean>, <Tail> ]
ZProportion2Estimate.Syntax=[ <Sample Proportion 1>, <Sample Size 1>, <Sample Proportion 2>, <Sample Size 2>, <Confidence Level> ]
ZProportion2Test.Syntax=[ <Sample Proportion 1>, <Sample Size 1>, <Sample Proportion 2>, <Sample Size 2>, <Tail> ]
ZProportionEstimate.Syntax=[ <Sample Proportion>, <Sample Size>, <Confidence Level> ]
ZProportionTest.Syntax=[ <Sample Proportion>, <Sample Size>, <Hypothesized Proportion>, <Tail> ]
Zip.Syntax=[ <Uitdrukking>, <Var1>, <List1>, <Var2>, <List2>, ... ]
Zipf.Syntax=[ <Number of Elements>, <Exponent> ]\n[ <Number of Elements>, <Exponent>, <Boolean Kumulatief> ]\n[ <Number of Elements>, <Exponent>, <Variable Value>, <Boolean Kumulatief> ]
Zipf.SyntaxCAS=[ <Number of Elements>, <Exponent>, <Variable Value>, <Boolean Kumulatief> ]
ZoomIn.Syntax=[ ]\n[ <Scale Factor> ]\n[ <Scale Factor>, <Center Point> ]\n[ <Min x>, <Min y>, <Max x>, <Max y> ]\n[ <Min x>, <Min y>, <Min z>, <Max x>, <Max y>, <Max z> ]
ZoomOut.Syntax=[ <Scale Factor> ]\n[ <Scale Factor>, <Center Point> ]
mad.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
mean.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
nCr.Syntax=[ <Getal n>, <Getal r> ]
stdev.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]
stdevp.Syntax=[ <Lys van Rou Data> ]\n[ <List of Numbers>, <Lys van Frekwensies> ]