# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
ANOVA.Syntax=[ <リスト>, <リスト>, ... ]
AffineRatio.Syntax=[ <点>, <点>, <点> ]
Angle.Syntax=[ <オブジェクト> ]\n[ <ベクトル>, <ベクトル> ]\n[ <直線>, <直線> ]\n[ <点>, <頂点>, <点> ]\n[ <点>, <頂点>, <角度> ]
Angle.Syntax3D=[ <オブジェクト> ]\n[ <ベクトル>, <ベクトル> ]\n[ <直線>, <直線> ]\n[ <直線>, <平面> ]\n[ <平面>, <平面> ]\n[ <点>, <頂点>, <点> ]\n[ <点>, <頂点>, <角度> ]\n[ <点>, <点>, <点>, <向き> ]
AngularBisector.Syntax=[ <直線>, <直線> ]\n[ <点>, <点>, <点> ]
Append.Syntax=[ <リスト>, <オブジェクト> ]\n[ <オブジェクト>, <リスト> ]
ApplyMatrix.Syntax=[ <行列>, <オブジェクト> ]
Arc.Syntax=[ <円>, <点>, <点> ]\n[ <楕円>, <点>, <点> ]\n[ <円>, <媒介変数の値>, <媒介変数の値> ]\n[ <楕円>, <媒介変数の値>, <媒介変数の値> ]
AreCollinear.Syntax=[ <点>, <点>, <点> ]
AreConcurrent.Syntax=[ <直線>, <直線>, <直線> ]
AreConcyclic.Syntax=[ <点>, <点>, <点>, <点> ]
AreCongruent.Syntax=[ <オブジェクト>, <オブジェクト> ]
AreEqual.Syntax=[ <オブジェクト>, <オブジェクト> ]
AreParallel.Syntax=[ <直線>, <直線> ]
ArePerpendicular.Syntax=[ <直線>, <直線> ]
Area.Syntax=[ <２次曲線> ]\n[ <多角形> ]\n[ <点>, ..., <点> ]
Assume.SyntaxCAS=[ <条件>, <式> ]
Asymptote.Syntax=[ <オブジェクト> ]
AttachCopyToView.Syntax=[ <オブジェクト>, <ビュー 0|1|2> ]\n[ <オブジェクト>, <ビュー 0|1|2>, <点 1>, <点 2>, <Screen Point 1>, <Screen Point 2> ]
Axes.Syntax=[ <２次曲線> ]
Axes.Syntax3D=[ <２次曲線> ]\n[ <２次曲面> ]
AxisStepX.Syntax=[ ]
AxisStepY.Syntax=[ ]
BarChart.Syntax=[ <データのリスト>, <度数のリスト> ]\n[ <生データのリスト>, <棒の幅>, <縦方向倍率 (オプション)> ]\n[ <データのリスト>, <度数のリスト>, <棒の幅> ]\n[ <開始値>, <終了値>, <高さのリスト> ]\n[ <開始値>, <終了値>, <式>, <変数>, <始点>, <終点> ]\n[ <開始値>, <終了値>, <式>, <変数>, <始点>, <終点>, <間隔> ]
Barycenter.Syntax=[ <点のリスト>, <重みのリスト> ]
Bernoulli.Syntax=[ <確率>, <累積の真偽値> ]
BetaDist.Syntax=[ <Alpha>, <Beta>, <変数値> ]\n[ <Alpha>, <Beta>, <変数値>, <累積の真偽値>  ]\n[ <Alpha>, <Beta>, x, <累積の真偽値> ]
Binomial.Syntax=[ <数値>, <数値> ]
BinomialDist.Syntax=[ <試行回数>, <成功確率> ]\n[ <試行回数>, <成功確率>, <累積の真偽値> ]\n[ <試行回数>, <成功確率>, <値のリスト> ]\n[ <試行回数>, <成功確率>, <変数値>, <累積の真偽値> ]
BinomialDist.SyntaxCAS=[ <試行回数>, <成功確率>, <変数値>, <累積の真偽値> ]
Bottom.Syntax=[ <２次曲面> ]
BoxPlot.Syntax=[ <yOffset>, <yスケール>, <生データのリスト> ]\n[ <yOffset>, <yスケール>, <生データのリスト>, <Boolean Outliers> ]\n[ <yOffset>, <yスケール>, <データのリスト>, <度数のリスト>, <Boolean Outliers> ]\n[ <yOffset>, <yスケール>, <開始値>, <Q1>, <中央値>, <Q3>, <終了値> ]
Button.Syntax=[ ]\n[ <見出し> ]
CASLoaded.Syntax=[]
CFactor.SyntaxCAS=[ <式> ]\n[ <式>, <変数> ]
CIFactor.SyntaxCAS=[ <式> ]\n[ <式>, <変数> ]
CSolutions.SyntaxCAS=[ <方程式> ]\n[ <方程式>, <変数> ]\n[ <方程式のリスト>, <変数のリスト> ]
CSolve.SyntaxCAS=[ <方程式> ]\n[ <方程式>, <変数> ]\n[ <方程式のリスト>, <変数のリスト> ]
Cauchy.Syntax=[ <中央値>, <スケール>, <変数値> ]\n[ <中央値>, <スケール>, <変数値>, <累積の真偽値>  ]\n[ <中央値>, <スケール>, x, <累積の真偽値> ]
Cauchy.SyntaxCAS=[ <中央値>, <スケール>, <変数値> ]
Cell.Syntax=[ <列>, <行> ]
CellRange.Syntax=[ <開始セル>, <終了セル> ]
Center.Syntax=[ <２次曲線> ]
Center.Syntax3D=[ <２次曲線> ]\n[ <２次曲面> ]
CenterView.Syntax=[ <中心点> ]
Centroid.Syntax=[ <多角形> ]
CharacteristicPolynomial.Syntax=[ <行列> ]
Checkbox.Syntax=[ ]\n[ <見出し> ]\n[ <リスト> ]\n[ <見出し>, <リスト> ]
ChiSquared.Syntax=[ <自由度>, <変数値> ]\n[ <自由度>, <変数値>, <累積の真偽値> ]\n[ <自由度>, x, <累積の真偽値> ]
ChiSquared.SyntaxCAS=[ <自由度>, <変数> ]
ChiSquaredTest.Syntax=[ <行列> ]\n[ <リスト>, <リスト> ]\n[ <行列>, <行列> ]
Circle.Syntax=[ <点>, <半径の数値> ]\n[ <点>, <線分> ]\n[ <点>, <点> ]\n[ <点>, <点>, <点> ]
Circle.Syntax3D=[ <点>, <半径の数値> ]\n[ <点>, <線分> ]\n[ <点>, <点> ]\n[ <点>, <点>, <点> ]\n[ <直線>, <点> ]\n[ <点>, <半径>, <向き> ]\n[ <点>, <点>, <向き> ]
CircleArc.Syntax=[ <中心>, <点>, <点> ]
CircleSector.Syntax=[ <中心>, <点>, <点> ]
CircumcircleArc.Syntax=[ <点>, <点>, <点> ]
CircumcircleSector.Syntax=[ <点>, <点>, <点> ]
Circumference.Syntax=[ <２次曲線> ]
Classes.Syntax=[ <データのリスト>, <階級の数> ]\n[ <データのリスト>, <開始>, <階級の幅> ]
ClosestPoint.Syntax=[ <パス>, <点> ]\n[ <直線>, <直線> ]
ClosestPointRegion.Syntax=[ <領域>, <点> ]
Coefficients.Syntax=[ <多項式> ]\n[ <２次曲線> ]
Coefficients.SyntaxCAS=[ <多項式> ]\n[ <多項式>, <変数> ]
Column.Syntax=[ <表計算のセル> ]
ColumnName.Syntax=[ <表計算のセル> ]
CommonDenominator.Syntax=[ <式>, <式> ]
CompleteSquare.Syntax=[ <２次関数> ]
ComplexRoot.Syntax=[ <多項式> ]
Cone.Syntax=[ <円>, <高さ> ]\n[ <点>, <点>, <半径> ]\n[ <点>, <ベクトル>, <角度> ]
ConeInfinite.Syntax=[ <点>, <ベクトル>, <角度> ]\n[ <点>, <点>, <角度> ]\n[ <点>, <直線>, <角度> ]
Conic.Syntax=[ <リスト> ]\n[ <点>, <点>, <点>, <点>, <点> ]\n[ <数値>, <数値>, <数値>, <数値>, <数値>, <数値> ]
ConstructionStep.Syntax=[ ]\n[ <オブジェクト> ]
ContingencyTable.Syntax=[ <テキストのリスト>, <テキストのリスト> ]\n[ <テキストのリスト>, <テキストのリスト>, <オプション> ]\n[ <List of Row Values>, <List of Column Values>, <度数表> ]\n[ <List of Row Values>, <List of Column Values>, <度数表> , <オプション> ]
ContinuedFraction.Syntax=[ <数値> ]\n[ <数値>, <レベル> ]\n[ <数値>, <レベル>, <短縮形 true | false> ]
ConvexHull.Syntax=[ <点のリスト> ]
CopyFreeObject.Syntax=[ <オブジェクト> ]
Corner.Syntax=[ <隅の番号> ]\n[ <画像>, <隅の番号> ]\n[ <テキスト>, <隅の番号> ]\n[ <グラフィックスビュー>, <隅の番号> ]
CountIf.Syntax=[ <条件>, <リスト> ]\n[ <条件>, <変数>, <リスト> ]
Covariance.Syntax=[ <点のリスト> ]\n[ <数値のリスト>, <数値のリスト> ]
Cross.Syntax=[ <ベクトル>, <ベクトル> ]
CrossRatio.Syntax=[ <点>, <点>, <点>, <点> ]
Cube.Syntax=[ <正方形> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <向き> ]
Cubic.Syntax=[ <点>, <点>, <点>, <数値> ]
Curvature.Syntax=[ <点>, <オブジェクト> ]
CurvatureVector.Syntax=[ <点>, <オブジェクト> ]
CurveCartesian.Syntax=[ <式>, <式>, <媒介変数>, <開始値>, <終了値> ]
CurveCartesian.Syntax3D=[ <式>, <式>, <媒介変数>, <開始値>, <終了値> ]\n[ <式>, <式>, <式>, <媒介変数>, <開始値>, <終了値> ]
Cylinder.Syntax=[ <円>, <高さ> ]\n[ <点>, <点>, <半径> ]
CylinderInfinite.Syntax=[ <直線>, <半径> ]\n[ <点>, <ベクトル>, <半径> ]\n[ <点>, <点>, <半径> ]
DataFunction.Syntax=[ <数値のリスト>, <数値のリスト> ]
Defined.Syntax=[ <オブジェクト> ]
Degree.Syntax=[ <多項式> ]
Degree.SyntaxCAS=[ <多項式> ]\n[ <多項式>, <変数> ]
DelauneyTriangulation.Syntax=[ <点のリスト> ]
Delete.Syntax=[ <オブジェクト> ]
Denominator.Syntax=[ <数値> ]\n[ <関数> ]
Denominator.SyntaxCAS=[ <式> ]
Derivative.Syntax=[ <関数> ]\n[ <曲線> ]\n[ <関数>, <数値> ]\n[ <関数>, <変数> ]\n[ <曲線>, <数値> ]\n[ <関数>, <変数>, <数値> ]
Derivative.SyntaxCAS=[ <式> ]\n[ <式>, <変数> ]\n[ <式>, <変数>, <数値> ]
Determinant.Syntax=[ <行列> ]
Diameter.Syntax=[ <ベクトル>, <２次曲線> ]\n[ <直線>, <２次曲線> ]
Difference.Syntax=[ <多角形>, <多角形> ]
Dilate.Syntax=[ <オブジェクト>, <拡大率> ]\n[ <オブジェクト>, <拡大率>, <拡大の中心点> ]
Dimension.Syntax=[ <オブジェクト> ]
Direction.Syntax=[ <直線> ]
Directrix.Syntax=[ <２次曲線> ]
Distance.Syntax=[ <点>, <オブジェクト> ]\n[ <直線>, <直線> ]\n[ <平面>, <平面> ]
Distance.SyntaxCAS=[ <点>, <オブジェクト> ]
Div.Syntax=[ <割られる数値>, <割る数値> ]\n[ <割られる多項式>, <割る多項式> ]
Division.Syntax=[ <割られる数値>, <割る数値> ]\n[ <割られる多項式>, <割る多項式> ]
Divisors.Syntax=[ <数値> ]
DivisorsList.Syntax=[ <数値> ]
DivisorsSum.Syntax=[ <数値> ]
Dodecahedron.Syntax=[ <正五角形> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <向き> ]
Dot.Syntax=[ <ベクトル>, <ベクトル> ]
DotPlot.Syntax=[ <生データのリスト>, <積み重ね true | false (オプション)>, <倍率 (オプション)>]
DynamicCoordinates.Syntax=[ <点>, <x座標>, <y座標> ]\n[ <点>, <x座標>, <y座標>, <z座標> ]
Eccentricity.Syntax=[ <２次曲線> ]
Eigenvalues.SyntaxCAS=[ <行列> ]
Eigenvectors.SyntaxCAS=[ <行列> ]
Element.Syntax=[ <リスト>, <要素の位置> ]\n[ <行列>, <行>, <列> ]\n[ <リスト>, <インデックス1>, <インデックス2>, ... ]
Element.SyntaxCAS=[ <リスト>, <要素の位置> ]\n[ <行列>, <行>, <列> ]
Eliminate.Syntax=[ <多項式のリスト>, <変数のリスト> ]
Ellipse.Syntax=[ <焦点>, <焦点>, <長軸の長さ> ]\n[ <焦点>, <焦点>, <線分> ]\n[ <焦点>, <焦点>, <点> ]
Ends.Syntax=[ <２次曲面> ]
Envelope.Syntax=[ <パス>, <点> ]
Erlang.Syntax=[ <シェイプ>, <比率>, <変数値> ]\n[ <シェイプ>, <比率>, <変数値>, <累積の真偽値> ]\n[ <シェイプ>, <比率>, x, <累積の真偽値> ]
Excentricity.Syntax=[ <２次曲線> ]
Execute.Syntax=[ <テキストのリスト> ]\n[ <テキストのリスト>, <引数>, <引数>, ... ]
Expand.Syntax=[ <式> ]
Exponential.Syntax=[ <λ>, <変数値> ]\n[ <λ>, <変数値>, <累積の真偽値> ]\n[ <λ>, x, <累積の真偽値> ]
Exponential.SyntaxCAS=[ <λ>, <変数値> ]
ExportImage.Syntax=[ <プロパティ>, <値>, <プロパティ>, <値>, ... ]
ExtendedGCD.Syntax=[ <整数>, <整数>]\n[ <多項式>, <多項式>]
Extremum.Syntax=[ <多項式> ]\n[ <関数>, <x開始値>, <x終了値> ]
Extremum.SyntaxCAS=[ <関数> ]\n[ <関数>, <x開始値>, <x終了値> ]
FDistribution.Syntax=[ <分子自由度>, <分母自由度>, <変数値> ]\n[ <分子自由度>, <分母自由度>, <変数値>, <累積の真偽値> ]\n[ <分子自由度>, <分母自由度>, x, <累積の真偽値> ]
FDistribution.SyntaxCAS=[ <分子自由度>, <分母自由度>, <変数値> ]
Factor.Syntax=[ <多項式> ]
Factor.SyntaxCAS=[ <数値> ]\n[ <多項式> ]\n[ <式>, <変数> ]
Factors.Syntax=[ <多項式> ]\n[ <数値> ]
FillCells.Syntax=[ <セル範囲>, <オブジェクト> ]\n[ <セル>, <リスト> ]\n[ <セル>, <行列> ]
FillColumn.Syntax=[ <列>, <リスト> ]
FillRow.Syntax=[ <行>, <リスト> ]
First.Syntax=[ <リスト> ]\n[ <テキスト> ]\n[ <リスト>, <要素の数> ]\n[ <テキスト>, <要素の数> ]\n[ <軌跡>, <要素の数> ]
First.SyntaxCAS=[ <リスト> ]\n[ <リスト>, <要素の数> ]
FirstAxis.Syntax=[ <２次曲線> ]
FirstAxisLength.Syntax=[ <２次曲線> ]
Fit.Syntax=[ <点のリスト>, <関数のリスト> ]\n[ <点のリスト>, <関数> ]
FitExp.Syntax=[ <点のリスト> ]
FitGrowth.Syntax=[ <点のリスト> ]
FitImplicit.Syntax=[ <点のリスト>, <次数> ]
FitLineX.Syntax=[ <点のリスト> ]
FitLineY.Syntax=[ <点のリスト> ]
FitLog.Syntax=[ <点のリスト> ]
FitLogistic.Syntax=[ <点のリスト> ]
FitPoly.Syntax=[ <点のリスト>, <多項式の次数> ]\n[ <フリーハンドで描いた関数>, <多項式の次数> ]
FitPow.Syntax=[ <点のリスト> ]
FitSin.Syntax=[ <点のリスト> ]
Flatten.Syntax=[ <リスト> ]
Focus.Syntax=[ <２次曲線> ]
FractionText.Syntax=[ <数値> ]\n[ <点> ]\n[ <数値>, <分子に符号の真偽値> ]
Frequency.Syntax=[ <生データのリスト> ]\n[ <累積の真偽値>, <生データのリスト> ]\n[ <階級境界値のリスト>, <生データのリスト> ]\n[ <テキストのリスト>, <テキストのリスト> ]\n[ <累積の真偽値>, <階級境界値のリスト>, <生データのリスト> ]\n[ <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <累積の真偽値>, <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)> ]
FrequencyPolygon.Syntax=[ <階級境界値のリスト>, <高さのリスト> ]\n[ <階級境界値のリスト>, <生データのリスト>, <論理式使用密度>, <Density Scale Factor (optional)> ]\n[ <累積の真偽値>, <階級境界値のリスト>, <生データのリスト>, <論理式使用密度>, <Density Scale Factor (optional)> ]
FrequencyTable.Syntax=[ <生データのリスト>, <倍率 (オプション)> ]\n[ <累積の真偽値>, <生データのリスト> ]\n[ <階級境界値のリスト>, <生データのリスト> ]\n[ <累積の真偽値>, <階級境界値のリスト>, <生データのリスト> ]\n[ <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <累積の真偽値>, <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)> ]
FromBase.Syntax=[ <数値のテキスト>, <進法の底> ]
Function.Syntax=[ <関数>, <x開始値>, <x終了値> ]\n[ <数値のリスト> ]
Function.Syntax3D=[ <数値のリスト> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <式>, <媒介変数1>, <開始値>, <終了値>, <媒介変数2>, <開始値>, <終了値> ]
Function.SyntaxCAS=[ <関数>, <x開始値>, <x終了値> ]
FutureValue.Syntax=[ <比率>, <期間の数>, <支払>, <現在の値 (optional)>, <型(optional)> ]
GCD.Syntax=[ <数値のリスト> ]\n[ <数値>, <数値> ]
GCD.SyntaxCAS=[ <数値のリスト> ]\n[ <多項式のリスト> ]\n[ <数値>, <数値> ]\n[ <多項式>, <多項式> ]
Gamma.Syntax=[ <Alpha>, <Beta>, <変数値> ]\n[ <Alpha>, <Beta>, <変数値>, <累積の真偽値>  ]\n[ <Alpha>, <Beta>, x, <累積の真偽値> ]
Gamma.SyntaxCAS=[ <Alpha>, <Beta>, <変数値> ]
GeometricMean.Syntax=[ <数値のリスト> ]
GetTime.Syntax=[]\n[ <フォーマット> ]
GroebnerDegRevLex.Syntax=[ <多項式のリスト> ]\n[ <多項式のリスト>, <変数のリスト> ]
GroebnerLex.Syntax=[ <多項式のリスト> ]\n[ <多項式のリスト>, <変数のリスト> ]
GroebnerLexDeg.Syntax=[ <多項式のリスト> ]\n[ <多項式のリスト>, <変数のリスト> ]
HarmonicMean.Syntax=[ <数値のリスト> ]
Height.Syntax=[ <立体> ]
HideLayer.Syntax=[ <数値> ]
Histogram.Syntax=[ <階級境界値のリスト>, <高さのリスト> ]\n[ <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <累積の真偽値>, <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)> ]
HistogramRight.Syntax=[ <階級境界値のリスト>, <高さのリスト> ]\n[ <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)>  ]\n[ <累積の真偽値>, <階級境界値のリスト>, <生データのリスト>, <Use Density>, <Density Scale Factor (optional)> ]
HyperGeometric.Syntax=[ <母集団の大きさ>, <成功数>, <標本の大きさ> ]\n[ <母集団の大きさ>, <成功数>, <標本の大きさ>, <累積の真偽値> ]\n[ <母集団の大きさ>, <成功数>, <標本の大きさ>, <変数値>, <累積の真偽値> ]
HyperGeometric.SyntaxCAS=[ <母集団の大きさ>, <成功数>, <標本の大きさ>, <変数値>, <累積の真偽値> ]
Hyperbola.Syntax=[ <焦点>, <焦点>, <長軸の長さ> ]\n[ <焦点>, <焦点>, <線分> ]\n[ <焦点>, <焦点>, <点> ]
IFactor.Syntax=[ <多項式> ]
IFactor.SyntaxCAS=[ <式> ]
Icosahedron.Syntax=[ <正三角形> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <向き> ]
Identity.Syntax=[ <数値> ]
If.Syntax=[ <条件>, <成立時> ]\n[ <条件>, <成立時>, <不成立時> ]
ImplicitCurve.Syntax=[ <点のリスト> ]\n[ <f(x, y)> ]
ImplicitDerivative.Syntax=[ <f(x, y)> ]
ImplicitDerivative.SyntaxCAS=[ <f(x, y)> ]\n[ <式>, <従属変数>, <独立変数> ]
Incircle.Syntax=[ <点>, <点>, <点> ]
IndexOf.Syntax=[ <オブジェクト>, <リスト> ]\n[ <テキスト>, <テキスト> ]\n[ <オブジェクト>, <リスト>, <開始インデックス> ]\n[ <テキスト>, <テキスト>, <開始インデックス> ]
Insert.Syntax=[ <リスト>, <リスト>, <位置> ]\n[ <オブジェクト>, <リスト>, <位置> ]
Integral.Syntax=[ <関数> ]\n[ <関数>, <変数> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <x開始値>, <x終了値>, <Boolean Evaluate> ]
Integral.SyntaxCAS=[ <関数> ]\n[ <関数>, <変数> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <変数>, <開始値>, <終了値> ]
IntegralBetween.Syntax=[ <関数>, <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <関数>, <x開始値>, <x終了値>, <Boolean Evaluate> ]
IntegralBetween.SyntaxCAS=[ <関数>, <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <関数>, <変数>, <開始値>, <終了値> ]
IntegralSymbolic.Syntax=[ <関数> ]\n[ <関数>, <変数> ]
InteriorAngles.Syntax=[ <多角形> ]
Intersect.Syntax=[ <オブジェクト>, <オブジェクト> ]\n[ <オブジェクト>, <オブジェクト>, <交点の番号> ]\n[ <オブジェクト>, <オブジェクト>, <初期点> ]\n[ <関数>, <関数>, <x開始値>, <x終了値> ]\n[ <曲線 1>, <曲線 2>, <媒介変数 1>, <媒介変数 2> ]
Intersect.SyntaxCAS=[ <関数>, <関数> ]
IntersectConic.Syntax=[ <平面>, <２次曲面> ]\n[ <２次曲面>, <２次曲面> ]
IntersectPath=IntersectionPaths
IntersectPath.Syntax=[ <直線>, <多角形> ]\n[ <多角形>, <多角形> ]
IntersectPath.Syntax3D=[ <直線>, <多角形> ]\n[ <多角形>, <多角形> ]\n[ <平面>, <多角形> ]\n[ <平面>, <２次曲面> ]
Intersection.Syntax=[ <リスト>, <リスト> ]
InverseBeta.Syntax=[ <Alpha>, <Beta>, <確率> ]
InverseBinomial.Syntax=[ <試行回数>, <成功確率>, <累積確率> ]
InverseBinomialMinimumTrials.Syntax=[ <累積確率>, <成功確率>, <成功数> ]
InverseBinomialMinimumTrials.SyntaxCAS=[ <累積確率>, <成功確率>, <成功数> ]
InverseCauchy.Syntax=[ <中央値>, <スケール>, <確率> ]
InverseChiSquared.Syntax=[ <自由度>, <確率> ]
InverseExponential.Syntax=[ <λ>, <確率> ]
InverseFDistribution.Syntax=[ <分子自由度>, <分母自由度>, <確率> ]
InverseGamma.Syntax=[ <Alpha>, <Beta>, <確率> ]
InverseHyperGeometric.Syntax=[ <母集団の大きさ>, <成功数>, <標本の大きさ>, <確率> ]
InverseLaplace.Syntax=[ <関数> ]\n[ <関数>, <変数> ]\n[ <関数>, <変数>, <変数> ]
InverseLogNormal.Syntax=[ <平均>, <標準偏差>, <確率> ]
InverseLogistic.Syntax=[ <平均>, <スケール>, <確率> ]
InverseNormal.Syntax=[ <平均>, <標準偏差>, <累積確率> ]
InversePascal.Syntax=[ <成功の数>, <成功の確率>, <確率> ]
InversePoisson.Syntax=[ <平均>, <確率> ]
InverseTDistribution.Syntax=[ <自由度>, <確率> ]
InverseWeibull.Syntax=[ <シェイプ>, <スケール>, <確率> ]
InverseZipf.Syntax=[ <要素の数>, <指数>, <確率> ]
Invert.Syntax=[ <行列> ]\n[ <関数> ]
IsFactored.Syntax=[ <多項式> ]
IsInRegion.Syntax=[ <点>, <領域> ]
IsInteger.Syntax=[ <数値> ]
IsPrime.Syntax=[ <数値> ]
IsTangent.Syntax=[ <直線>, <２次曲線> ]
IsVertexForm.Syntax=[ <関数> ]
Iteration.Syntax=[ <関数>, <開始値>, <反復回数> ]\n[ <式>, <変数>, <開始値>, <カウント> ]
IterationList.Syntax=[ <関数>, <開始値>, <反復回数> ]\n[ <式>, <変数>, <開始値>, <カウント> ]
IterationList.SyntaxCAS=[ <関数>, <開始値>, <反復回数> ]
Join.Syntax=[ <リストのリスト> ]\n[ <リスト>, <リスト>, ... ]
JordanDiagonalization.SyntaxCAS=[ <行列> ]
KeepIf.Syntax=[ <条件>, <リスト> ]\n[ <条件>, <変数>, <リスト> ]
LCM.Syntax=[ <数値のリスト> ]\n[ <数値>, <数値> ]
LCM.SyntaxCAS=[ <数値のリスト> ]\n[ <多項式のリスト> ]\n[ <数値>, <数値> ]\n[ <多項式>, <多項式> ]
LUDecomposition.Syntax=[ <行列> ]
LaTeX.Syntax=[ <オブジェクト> ]\n[ <オブジェクト>, <変数代入のための真偽値> ]\n[ <オブジェクト>, <変数代入のための真偽値>, <名前表示の真偽値> ]
Laplace.Syntax=[ <関数> ]\n[ <関数>, <変数> ]\n[ <関数>, <変数>, <変数> ]
Last.Syntax=[ <リスト> ]\n[ <テキスト> ]\n[ <リスト>, <要素の数> ]\n[ <テキスト>, <要素の数> ]
Last.SyntaxCAS=[ <リスト> ]\n[ <リスト>, <要素の数> ]
LeftSide.Syntax=[ <方程式> ]
LeftSide.SyntaxCAS=[ <方程式> ]\n[ <方程式のリスト> ]\n[ <方程式のリスト>, <インデックス> ]
LeftSum.Syntax=[ <関数>, <x開始値>, <x終了値>, <長方形の数> ]
Length.Syntax=[ <オブジェクト> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <開始点>, <終了点> ]\n[ <曲線>, <t開始値>, <t終了値> ]\n[ <曲線>, <開始点>, <終了点> ]
Length.SyntaxCAS=[ <リスト> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <変数>, <x開始値>, <x終了値> ]
LetterToUnicode.Syntax=[ <文字> ]
Limit.Syntax=[ <関数>, <値> ]
Limit.SyntaxCAS=[ <式>, <値> ]\n[ <式>, <変数>, <値> ]
LimitAbove.Syntax=[ <関数>, <値> ]
LimitAbove.SyntaxCAS=[ <式>, <値> ]\n[ <式>, <変数>, <値> ]
LimitBelow.Syntax=[ <関数>, <値> ]
LimitBelow.SyntaxCAS=[ <式>, <値> ]\n[ <式>, <変数>, <値> ]
Line.Syntax=[ <点>, <点> ]\n[ <点>, <平行な直線> ]\n[ <点>, <方向ベクトル> ]
LineBisector.Syntax=[ <線分> ]\n[ <点>, <点> ]
LineBisector.Syntax3D=[ <線分> ]\n[ <点>, <点> ]\n[ <点>, <点>, <向き> ]
LineGraph.Syntax=[ <x座標のリスト>, <y座標のリスト> ]
Locus.Syntax=[ <軌跡の点>, <点> ]\n[ <軌跡の点>, <スライダー> ]\n[ <ベクトル場>, <点> ]\n[ <f(x, y)>, <点> ]
LocusEquation.Syntax=[ <軌跡> ]\n[ <軌跡の点>, <駆動点> ]\n[ <論理式>, <駆動点> ]
LogNormal.Syntax=[ <平均>, <標準偏差>, <変数値> ]\n[ <平均>, <標準偏差>, <変数値>, <累積の真偽値>  ]\n[ <平均>, <標準偏差>, x, <累積の真偽値> ]
Logistic.Syntax=[ <平均>, <スケール>, <変数値> ]\n[ <平均>, <スケール>, <変数値>, <累積の真偽値>  ]\n[ <平均>, <スケール>, x, <累積の真偽値> ]
LowerSum.Syntax=[ <関数>, <x開始値>, <x終了値>, <長方形の数> ]
MatrixRank.Syntax=[ <行列> ]
Max.Syntax=[ <区間> ]\n[ <数値>, <数値> ]\n[ <リスト> ]\n[ <データのリスト>, <度数のリスト> ]\n[ <関数>, <x開始値>, <x終了値> ]
Max.SyntaxCAS=[ <リスト> ]\n[ <区間> ]\n[ <数値>, <数値> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <データのリスト>, <度数のリスト> ]
Maximize.Syntax=[ <従属する数値>, <自由な数値> ]\n[ <従属する数値>, <パス上の点> ]
Mean.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
MeanX.Syntax=[ <点のリスト> ]
MeanY.Syntax=[ <点のリスト> ]
Median.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
Median.SyntaxCAS=[ <数値のリスト> ]
Midpoint.Syntax=[ <線分> ]\n[ <２次曲線> ]\n[ <区間> ]\n[ <点>, <点> ]
Min.Syntax=[ <区間> ]\n[ <数値>, <数値> ]\n[ <リスト> ]\n[ <データのリスト>, <度数のリスト> ]\n[ <関数>, <x開始値>, <x終了値> ]
Min.SyntaxCAS=[ <リスト> ]\n[ <区間> ]\n[ <数値>, <数値> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <データのリスト>, <度数のリスト> ]
MinimalPolynomial.Syntax=[ <行列> ]
Minimize.Syntax=[ <従属する数値>, <自由な数値> ]\n[ <従属する数値>, <パス上の点> ]
MinimumSpanningTree.Syntax=[ <点のリスト> ]
Mirror.Syntax=[ <オブジェクト>, <点> ]\n[ <オブジェクト>, <直線> ]\n[ <オブジェクト>, <円> ]
Mirror.Syntax3D=[ <オブジェクト>, <点> ]\n[ <オブジェクト>, <直線> ]\n[ <オブジェクト>, <平面> ]\n[ <オブジェクト>, <円> ]
MixedNumber.SyntaxCAS=[ <数値> ]
Mod.Syntax=[ <割られる数値>, <割る数値> ]\n[ <割られる多項式>, <割る多項式> ]
Mode.Syntax=[ <数値のリスト> ]
ModularExponent.Syntax=[ <数値>, <数値>, <数値> ]
NDerivative.Syntax=[ <関数> ]\n[ <関数>, <次数> ]
NIntegral.Syntax=[ <関数> ]\n[ <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <x開始値>, <Start y-Value>, <x終了値> ]
NIntegral.SyntaxCAS=[ <関数>, <x開始値>, <x終了値> ]\n[ <関数>, <変数>, <開始値>, <終了値> ]
NInvert.Syntax=[ <関数> ]
NSolutions.Syntax=[ <方程式> ]
NSolutions.SyntaxCAS=[ <方程式> ]\n[ <方程式>, <変数> ]\n[ <方程式>, <変数 = 開始値> ]\n[ <方程式のリスト>, <変数のリスト> ]
NSolve.Syntax=[ <方程式> ]
NSolve.SyntaxCAS=[ <方程式> ]\n[ <方程式>, <変数> ]\n[ <方程式>, <変数 = 開始値> ]\n[ <方程式のリスト>, <変数のリスト> ]
NSolveODE.Syntax=[ <導関数のリスト>, <x座標の初期値>, <y座標の初期値のリスト>, <x座標の最終値> ]
Name.Syntax=[ <オブジェクト> ]
Net.Syntax=[ <多面体>, <数値> ]\n[ <多面体>, <数値>, <面>, <辺>, <辺>, ... ]
NextPrime.Syntax=[ <数値> ]
Normal.Syntax=[ <平均>, <標準偏差>, <変数値> ]\n[ <平均>, <標準偏差>, <変数値>, <累積の真偽値> ]\n[ <平均>, <標準偏差>, x, <累積の真偽値> ]
NormalQuantilePlot.Syntax=[ <生データのリスト> ]
Normalize.Syntax=[ <数値のリスト> ]\n[ <点のリスト> ]
Numerator.Syntax=[ <数値> ]\n[ <関数> ]
Numerator.SyntaxCAS=[ <式> ]
Numeric.SyntaxCAS=[ <式> ]\n[ <式>, <有効数字> ]
Object.Syntax=[ <オブジェクト名のテキスト> ]
Octahedron.Syntax=[ <正三角形> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <向き> ]
Ordinal.Syntax=[ <整数> ]
OrdinalRank.Syntax=[ <リスト> ]
OrthogonalLine.Syntax=[ <点>, <直線> ]\n[ <点>, <線分> ]\n[ <点>, <ベクトル> ]
OrthogonalLine.Syntax3D=[ <点>, <直線> ]\n[ <点>, <線分> ]\n[ <点>, <ベクトル> ]\n[ <点>, <平面> ]\n[ <直線>, <直線> ]\n[ <点>, <向き>, <向き> ]\n[ <点>, <直線>, <Context> ]
OrthogonalPlane.Syntax=[ <点>, <直線> ]\n[ <点>, <ベクトル> ]
OrthogonalVector.Syntax=[ <直線> ]\n[ <線分> ]\n[ <ベクトル> ]
OrthogonalVector.Syntax3D=[ <直線> ]\n[ <線分> ]\n[ <ベクトル> ]\n[ <平面> ]
OrthogonalVector.SyntaxCAS=[ <ベクトル> ]
OsculatingCircle.Syntax=[ <点>, <オブジェクト> ]
PMCC.Syntax=[ <点のリスト> ]\n[ <x座標のリスト>, <y座標のリスト> ]
Pan.Syntax=[ <x>, <y> ]
Pan.Syntax3D=[ <x>, <y> ]\n[ <x>, <y>, <z> ]
Parabola.Syntax=[ <点>, <直線> ]
Parameter.Syntax=[ <２次曲線> ]
ParametricDerivative.Syntax=[ <曲線> ]
ParseToFunction.Syntax=[ <関数>, <文字列> ]
ParseToNumber.Syntax=[ <数値>, <文字列> ]
PartialFractions.Syntax=[ <関数> ]
PartialFractions.SyntaxCAS=[ <関数> ]\n[ <関数>, <変数> ]
Pascal.Syntax=[ <成功の数>, <成功の確率> ]\n[ <成功の数>, <成功の確率>, <累積の真偽値> ]\n[ <成功の数>, <成功の確率>, <変数値>, <累積の真偽値> ]
Pascal.SyntaxCAS=[ <成功の数>, <成功の確率>, <変数値>, <累積の真偽値> ]
PathParameter.Syntax=[ <パス上の点> ]
Payment.Syntax=[ <比率>, <期間の数>, <現在の値>, <将来の値 (optional)>, <型(optional)> ]
PenStroke.Syntax=[ <点>, ..., <点> ]
Percentile.Syntax=[ <数値のリスト>, <パーセント> ]
Perimeter.Syntax=[ <多角形> ]\n[ <２次曲線> ]\n[ <軌跡> ]
Periods.Syntax=[ <比率>, <支払>, <現在の値>, <将来の値 (optional)>, <型(optional)> ]
PieChart.Syntax=[ <度数のリスト> ]\n[ <度数のリスト>, <中心>, <半径> ]
Plane.Syntax=[ <多角形> ]\n[ <２次曲線> ]\n[ <点>, <平面> ]\n[ <点>, <直線> ]\n[ <直線>, <直線> ]\n[ <点>, <点>, <点> ]\n[ <点>, <ベクトル>, <ベクトル> ]
PlaneBisector.Syntax=[ <線分> ]\n[ <点>, <点> ]
PlaySound.Syntax=[ <ファイル> ]\n[ <Boolean Play> ]\n[ <関数>, <最小値>, <最大値> ]\n[ <関数>, <最小値>, <最大値>, <サンプルレート>, <サンプル深度> ]
PlotSolve.Syntax=[ <xの方程式> ]
Point.Syntax=[ <オブジェクト> ]\n[ <オブジェクト>, <引数> ]\n[ <点>, <ベクトル> ]\n[ <リスト> ]
PointIn.Syntax=[ <領域> ]
PointList.Syntax=[ <リスト> ]
Poisson.Syntax=[ <平均> ]\n[ <平均>, <累積の真偽値> ]\n[ <平均>, <変数値>, <累積の真偽値> ]
Poisson.SyntaxCAS=[ <平均>, <変数値>, <累積の真偽値> ]
Polar.Syntax=[ <点>, <２次曲線> ]\n[ <直線>, <２次曲線> ]
PolyLine=PolyLine
PolyLine.Syntax=[ <点のリスト> ]\n[ <点>, ..., <点> ]
Polygon.Syntax=[ <点のリスト> ]\n[ <点>, ..., <点> ]\n[ <点>, <点>, <頂点の数> ]
Polygon.Syntax3D=[ <点のリスト> ]\n[ <点>, ..., <点> ]\n[ <点>, <点>, <頂点の数> ]\n[ <点>, <点>, <頂点の数>, <向き> ]
Polynomial.Syntax=[ <関数> ]\n[ <点のリスト> ]
Polynomial.SyntaxCAS=[ <関数> ]\n[ <関数>, <変数> ]
PresentValue.Syntax=[ <比率>, <期間の数>, <支払>, <将来の値 (optional)>, <型(optional)> ]
PreviousPrime.Syntax=[ <数値> ]
PrimeFactors.Syntax=[ <数値> ]
Prism.Syntax=[ <多角形>, <点> ]\n[ <多角形>, <高さ> ]\n[ <点>, <点>, ... ]
Product.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <要素の数> ]\n[ <数値のリスト>, <度数のリスト> ]\n[ <式>, <変数>, <開始値>, <終了値> ]
Product.SyntaxCAS=[ <式のリスト> ]\n[ <式>, <変数>, <開始インデックス>, <終了インデックス> ]
Prove.Syntax=[ <論理式> ]
ProveDetails.Syntax=[ <論理式> ]
Pyramid.Syntax=[ <多角形>, <点> ]\n[ <多角形>, <高さ> ]\n[ <点>, <点>, <点>, <点>, ... ]
Q1.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
Q3.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
QRDecomposition.Syntax=[ <行列> ]
QuadricSide.Syntax=[ <２次曲面> ]
RSquare.Syntax=[ <点のリスト>, <関数> ]
Radius.Syntax=[ <２次曲線> ]
Random.Syntax=[ <最小の整数>, <最大の整数> ]\n[ <最小の整数>, <最大の整数>, <標本数> ]\n[ <最小の整数>, <最大の整数>, <固定の真偽値> ]
Random.SyntaxCAS=[ <最小の整数>, <最大の整数> ]\n[ <最小の整数>, <最大の整数>, <標本数> ]
RandomBinomial.Syntax=[ <試行回数>, <確率> ]
RandomDiscrete.Syntax=[ <リスト>, <リスト> ]
RandomElement.Syntax=[ <リスト> ]
RandomNormal.Syntax=[ <平均>, <標準偏差> ]
RandomPointIn.Syntax=[ <領域> ]\n[ <点のリスト> ]\n[ <x最小>, <x最大>, <y最小>, <y最大> ]
RandomPoisson.Syntax=[ <平均> ]
RandomPolynomial.Syntax=[ <次数>, <係数の最小値>, <係数の最大値> ]
RandomPolynomial.SyntaxCAS=[ <次数>, <係数の最小値>, <係数の最大値> ]\n[ <変数>, <次数>, <係数の最小値>, <係数の最大値> ]
RandomUniform.Syntax=[ <最小>, <最大> ]\n[ <最小>, <最大>, <標本数> ]
Rate.Syntax=[ <期間の数>, <支払>, <現在の値>, <将来の値 (optional)>, <型(optional)>, <推測(optional)> ]
Rationalize.SyntaxCAS=[ <数値> ]
Ray.Syntax=[ <開始点>, <点> ]\n[ <開始点>, <方向ベクトル> ]
ReadText.Syntax=[ <テキスト> ]
RectangleSum.Syntax=[ <関数>, <x開始値>, <x終了値>, <長方形の数>, <長方形の開始位置> ]
ReducedRowEchelonForm.Syntax=[ <行列> ]
Relation.Syntax=[ <リスト> ]\n[ <オブジェクト>, <オブジェクト> ]
RemovableDiscontinuity.Syntax=[ <関数> ]
Remove.Syntax=[ <リスト>, <リスト> ]
RemoveUndefined.Syntax=[ <リスト> ]
Rename.Syntax=[ <オブジェクト>, <名前> ]
Repeat.Syntax=[ <数値>, <命令>, <命令>, ... ]
ReplaceAll.Syntax=[ <テキスト>, <一致するテキスト>, <置換するテキスト> ]
ResidualPlot.Syntax=[ <点のリスト>, <関数> ]
Reverse.Syntax=[ <リスト> ]
RightSide.Syntax=[ <方程式> ]
RightSide.SyntaxCAS=[ <方程式> ]\n[ <方程式のリスト> ]\n[ <方程式のリスト>, <インデックス> ]
RigidPolygon.Syntax=[ <多角形> ]\n[ <多角形>, <xオフセット>, <yオフセット> ]\n[ <自由点>, ..., <自由点> ]
Root.Syntax=[ <多項式> ]\n[ <関数>, <xの初期値> ]\n[ <関数>, <x開始値>, <x終了値> ]
Root.SyntaxCAS=[ <多項式> ]
RootList.Syntax=[ <リスト> ]
RootMeanSquare.Syntax=[ <数値のリスト> ]
Roots.Syntax=[ <関数>, <x開始値>, <x終了値> ]
Rotate.Syntax=[ <オブジェクト>, <角度> ]\n[ <オブジェクト>, <角度>, <点> ]
Rotate.Syntax3D=[ <オブジェクト>, <角度> ]\n[ <オブジェクト>, <角度>, <点> ]\n[ <オブジェクト>, <角度>, <回転軸> ]\n[ <オブジェクト>, <角度>, <回転軸上の点>, <軸の方向または平面> ]
RotateText.Syntax=[ <テキスト>, <角度> ]
Row.Syntax=[ <表計算のセル> ]
RunClickScript.Syntax=[ <オブジェクト> ]
RunUpdateScript.Syntax=[ <オブジェクト> ]
SDX.Syntax=[ <点のリスト> ]
SDY.Syntax=[ <点のリスト> ]
SVD.Syntax=[ <行列> ]
SXX.Syntax=[ <数値のリスト> ]\n[ <点のリスト> ]
SXY.Syntax=[ <点のリスト> ]\n[ <数値のリスト>, <数値のリスト> ]
SYY.Syntax=[ <点のリスト> ]
Sample.Syntax=[ <リスト>, <サイズ> ]\n[ <リスト>, <サイズ>, <重複を許す> ]
SampleSD.SyntaxCAS=[ <数値のリスト> ]
SampleSDX.Syntax=[ <点のリスト> ]
SampleSDY.Syntax=[ <点のリスト> ]
SampleVariance.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
SampleVariance.SyntaxCAS=[ <数値のリスト> ]
ScientificText.Syntax=[ <数値> ]\n[ <数値>, <精度> ]
SecondAxis.Syntax=[ <２次曲線> ]
SecondAxisLength.Syntax=[ <２次曲線> ]
Sector.Syntax=[ <２次曲線>, <点>, <点> ]\n[ <２次曲線>, <媒介変数の値>, <媒介変数の値> ]
Segment.Syntax=[ <点>, <点> ]\n[ <点>, <数値> ]
SelectObjects.Syntax=[ ]\n[ <オブジェクト>, <オブジェクト>, ... ]
SelectedElement.Syntax=[ <リスト> ]
SelectedIndex.Syntax=[ <リスト> ]
Semicircle.Syntax=[ <点>, <点> ]
Sequence.Syntax=[ <終了値> ]\n[ <開始値>, <終了値> ]\n[ <開始値>, <終了値>, <増分> ]\n[ <式>, <変数>, <開始値>, <終了値> ]\n[ <式>, <変数>, <開始値>, <終了値>, <増分> ]
SetActiveView.Syntax=[ <ビュー> ]\n[ <平面> ]
SetAxesRatio.Syntax=[ <数値>, <数値> ]
SetAxesRatio.Syntax3D=[ <数値>, <数値> ]\n[ <数値>, <数値>, <数値> ]
SetBackgroundColor.Syntax=[ <色> ]\n[ <オブジェクト>, <色> ]\n[ <赤>, <緑>, <青> ]\n[ <オブジェクト>, <赤>, <緑>, <青> ]
SetCaption.Syntax=[ <オブジェクト>, <テキスト> ]
SetColor.Syntax=[ <オブジェクト>, <色> ]\n[ <オブジェクト>, <赤>, <緑>, <青> ]
SetConditionToShowObject.Syntax=[ <オブジェクト>, <条件> ]
SetConstructionStep.Syntax=[ <数値> ]
SetCoords.Syntax=[ <オブジェクト>, <x>, <y> ]\n[ <オブジェクト>, <x>, <y>, <z> ]
SetDecoration.Syntax=[ <オブジェクト>, <数値> ]\n[ <線分>, <数値>, <数値>]
SetDynamicColor.Syntax=[ <オブジェクト>, <赤>, <緑>, <青> ]\n[ <オブジェクト>, <赤>, <緑>, <青>, <不透明度> ]
SetFilling.Syntax=[ <オブジェクト>, <数値> ]
SetFixed.Syntax=[ <オブジェクト>, <true | false> ]\n[ <オブジェクト>, <true | false>, <true | false> ]
SetImage.Syntax=[ <オブジェクト>, <画像> ]\n[ <オブジェクト>, <テキスト> ]
SetLabelMode.Syntax=[ <オブジェクト>, <数値> ]
SetLayer.Syntax=[ <オブジェクト>, <Layer> ]
SetLevelOfDetail.Syntax=[ <曲面>, <詳細度> ]
SetLineStyle.Syntax=[ <オブジェクト>, <数値> ]
SetLineThickness.Syntax=[ <オブジェクト>, <数値> ]
SetPerspective.Syntax=[ <テキスト> ]
SetPointSize.Syntax=[ <オブジェクト>, <数値> ]
SetPointStyle.Syntax=[ <点>, <数値> ]
SetSeed.Syntax=[ <整数> ]
SetSpinSpeed.Syntax=[ <数値> ]
SetTooltipMode.Syntax=[ <オブジェクト>, <数値> ]
SetTrace.Syntax=[ <オブジェクト>, <true | false> ]
SetValue.Syntax=[ <真偽値>, <0|1> ]\n[ <オブジェクト>, <オブジェクト> ]\n[ <リスト>, <数値>, <オブジェクト> ]
SetViewDirection.Syntax=[ ]\n[ <向き> ]\n[ <向き>, <Boolean animate> ]
SetVisibleInView.Syntax=[ <オブジェクト>, <View Number 1|2>, <真偽値> ]
Shear.Syntax=[ <オブジェクト>, <直線>, <比率> ]
ShortestDistance.Syntax=[ <線分のリスト>, <開始点>, <終了点>, <重み付けの論理値> ]
ShowAxes.Syntax=[]\n[ <真偽値> ]\n[ <ビュー>, <真偽値> ]
ShowGrid.Syntax=[]\n[ <真偽値> ]\n[ <ビュー>, <真偽値> ]
ShowLabel.Syntax=[ <オブジェクト>, <真偽値> ]
ShowLayer.Syntax=[ <数値> ]
Shuffle.Syntax=[ <リスト> ]
SigmaXX.Syntax=[ <点のリスト> ]\n[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
SigmaXY.Syntax=[ <点のリスト> ]\n[ <x座標のリスト>, <y座標のリスト> ]
SigmaYY.Syntax=[ <点のリスト> ]
Simplify.Syntax=[ <関数> ]\n[ <テキスト> ]
Simplify.SyntaxCAS=[ <関数> ]
Slider.Syntax=[ <最小>, <最大>, <増分>, <速度>, <幅>, <角度か>, <水平>, <アニメーション>, <ランダム> ]
Slope.Syntax=[ <直線> ]
SlopeField.Syntax=[ <f(x, y)> ]\n[ <f(x, y)>, <数値> ]\n[ <f(x, y)>, <数値>, <長さの倍率 a> ]\n[ <f(x, y)>, <数値>, <長さの倍率 a>, <x最小>, <y最小>, <x最大>, <y最大> ]
SlowPlot.Syntax=[ <関数> ]\n[ <関数>, <論理 反復> ]
Solutions.Syntax=[ <方程式> ]
Solutions.SyntaxCAS=[ <方程式> ]\n[ <方程式>, <変数> ]\n[ <方程式のリスト>, <変数のリスト> ]
Solve.Syntax=[ <方程式> ]
Solve.SyntaxCAS=[ <xの方程式> ]\n[ <方程式>, <変数> ]\n[ <方程式のリスト>, <変数のリスト> ]\n[ <​媒介変数方程式のリスト>, <変数のリスト> ]\n[ <方程式>, <変数>, <仮定のリスト> ]
SolveCubic.SyntaxCAS=[ <３次多項式> ]
SolveODE.Syntax=[ <f'(x, y)> ]\n[ <f'(x, y)>, <f上の点> ]\n[ <f'(x, y)>, <x開始値>, <y開始値>, <x終了値>, <間隔> ]\n[ <y'>, <x'>, <x開始値>, <y開始値>, <t終了値>, <間隔> ]\n[ <b(x)>, <c(x)>, <f(x)>, <x開始値>, <y開始値>, <y'開始値>, <x終了値>, <間隔> ]
SolveODE.SyntaxCAS=[ <方程式> ]\n[ <方程式>, <f上の点（のリスト）> ]\n[ <方程式>, <f上の点（のリスト）>, <f'上の点（のリスト）> ]\n[ <方程式>, <従属変数>, <独立変数>, <f上の点（のリスト）> ] \n[ <方程式>, <従属変数>, <独立変数>, <f上の点（のリスト）>, <f'上の点（のリスト）> ]
SolveQuartic.SyntaxCAS=[ <４次多項式> ]
Sort.Syntax=[ <リスト> ]\n[ <値>, <キー> ]
Spearman.Syntax=[ <点のリスト> ]\n[ <数値のリスト>, <数値のリスト> ]
Sphere.Syntax=[ <点>, <半径> ]\n[ <点>, <点> ]
Spline.Syntax=[ <点のリスト> ]\n[ <点のリスト>, <次数 ≥ 3> ]\n[ <点のリスト>, <次数 ≥ 3>, <重み関数> ]
Split.Syntax=[ <テキスト>, <分割するテキストのリスト> ]
StartAnimation.Syntax=[ ]\n[ <真偽値> ]\n[ <スライダーまたは点>, <スライダーまたは点>, ... ]\n[ <スライダーまたは点>, <スライダーまたは点>, ..., <真偽値> ]
StartRecord.Syntax=[ ]\n[ <真偽値> ]
StemPlot.Syntax=[ <リスト> ]\n[ <リスト>, <Adjustment -1|0|1> ]
StepGraph.Syntax=[ <点のリスト> ]\n[ <点のリスト>, <論理結合> ]\n[ <x座標のリスト>, <y座標のリスト> ]\n[ <点のリスト>, <論理結合>, <Point style> ]\n[ <x座標のリスト>, <y座標のリスト>, <論理結合> ]\n[ <x座標のリスト>, <y座標のリスト>, <論理結合>, <Point style> ]
StickGraph.Syntax=[ <点のリスト> ]\n[ <点のリスト>, <Boolean Horizontal> ]\n[ <x座標のリスト>, <y座標のリスト> ]\n[ <x座標のリスト>, <y座標のリスト>, <Boolean Horizontal> ]
Stretch.Syntax=[ <オブジェクト>, <ベクトル> ]\n[ <オブジェクト>, <直線>, <比率> ]
Substitute.SyntaxCAS=[ <式>, <代入リスト> ]\n[ <式>, <変数>, <代入する値> ]
Sum.Syntax=[ <リスト> ]\n[ <リスト>, <要素の数> ]\n[ <リスト>, <度数のリスト> ]\n[ <式>, <変数>, <開始値>, <終了値> ]
Sum.SyntaxCAS=[ <リスト> ]\n[ <式>, <変数>, <開始値>, <終了値> ]
SumSquaredErrors.Syntax=[ <点のリスト>, <関数> ]
SurdText.Syntax=[ <点> ]\n[ <数値> ]\n[ <数値>, <リスト> ]
Surface.Syntax=[ <関数>, <角度> ]\n[ <曲線>, <角度>, <直線> ]\n[ <式>, <式>, <式>, <媒介変数1>, <開始値>, <終了値>, <媒介変数2>, <開始値>, <終了値> ]
TDistribution.Syntax=[ <自由度>, <変数値> ]\n[ <自由度>, <変数値>, <累積の真偽値> ]\n[ <自由度>, x, <累積の真偽値> ]
TDistribution.SyntaxCAS=[ <自由度>, <変数値> ]
TMean2Estimate.Syntax=[ <標本データ1のリスト>, <標本データ2のリスト>, <信頼度>, <Boolean Pooled> ]\n[ <標本平均1>, <標本標準偏差1>, <標本の大きさ1>, <標本平均2>, <標本標準偏差2>, <標本の大きさ2>, <信頼度>, <Boolean Pooled> ]
TMeanEstimate.Syntax=[ <標本データのリスト>, <信頼度> ]\n[ <標本平均>, <標本標準偏差>, <標本の大きさ>, <信頼度> ]
TTest.Syntax=[ <標本データのリスト>, <仮説平均>, <裾> ]\n[ <標本平均>, <標本標準偏差>, <標本の大きさ>, <仮説平均>, <裾> ]
TTest2.Syntax=[ <標本データ1のリスト>, <標本データ2のリスト>, <裾>, <Boolean Pooled> ]\n[ <標本平均1>, <標本標準偏差1>, <標本の大きさ1>, <標本平均2>, <標本標準偏差2>, <標本の大きさ2>, <裾>, <Boolean Pooled> ]
TTestPaired.Syntax=[ <標本データ1のリスト>, <標本データ2のリスト>, <裾> ]
TableText.Syntax=[ <リスト>, <リスト>, ... ]\n[ <リスト>, <リスト>, ..., <テキストの揃え> ]\n[ <リスト>, <リスト>, ..., <テキストの揃え>, <セル幅の最小値> ]\n[ <リスト>, <リスト>, ..., <テキストの揃え>, <セル幅の最小値>, <セルの高さの最小値> ]
Take.Syntax=[ <リスト>, <開始位置>, <終了位置> ]\n[ <リスト>, <開始位置> ]\n[ <テキスト>, <開始位置>, <終了位置> ]\n[ <テキスト>, <開始位置> ]
Take.SyntaxCAS=[ <リスト>, <開始位置> ]\n[ <リスト>, <開始位置>, <終了位置> ]\n[ <テキスト>, <開始位置>, <終了位置> ]\n[ <テキスト>, <開始位置> ]
Tangent.Syntax=[ <点>, <２次曲線> ]\n[ <点>, <関数> ]\n[ <曲線上の点>, <曲線> ]\n[ <xの値>, <関数> ]\n[ <直線>, <２次曲線> ]\n[ <２次曲線>, <２次曲線> ]
Tangent.SyntaxCAS=[ <数値>, <関数> ]\n[ <点>, <オブジェクト> ]
TaylorSeries.Syntax=[ <関数>, <xの値>, <次数> ]
TaylorSeries.SyntaxCAS=[ <式>, <xの値>, <次数> ]\n[ <式>, <変数>, <変数値>, <次数> ]
Tetrahedron.Syntax=[ <正三角形> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <向き> ]
Text.Syntax=[ <オブジェクト> ]\n[ <オブジェクト>, <変数代入のための真偽値> ]\n[ <オブジェクト>, <点> ]\n[ <オブジェクト>, <点>, <変数代入のための真偽値> ]\n[ <オブジェクト>, <点>, <変数代入のための真偽値>, <LaTeX形式の真偽値> ]\n[ <オブジェクト>, <点>, <変数代入のための真偽値>, <LaTeX形式の真偽値>, <水平方向の配置 -1|0|1> ]\n[ <オブジェクト>, <点>, <変数代入のための真偽値>, <LaTeX形式の真偽値>, <水平方向の配置 -1|0|1>, <垂直方向の配置 -1|0|1> ]
TextToUnicode.Syntax=[ <テキスト> ]
Textfield.Syntax=[ <リンクされたオブジェクト> ]
TiedRank.Syntax=[ <リスト> ]
ToBase.Syntax=[ <数値>, <進法の底> ]
ToComplex.Syntax=[ <ベクトル> ]
ToExponential.SyntaxCAS=[ <複素数> ]
ToPoint.Syntax=[ <複素数> ]
ToPolar.Syntax=[ <複素数> ]\n[ <ベクトル> ]
ToolImage.Syntax=[ <数値> ]\n[ <数値>, <点> ]\n[ <数値>, <点>, <点> ]
Top.Syntax=[ <２次曲面> ]
Translate.Syntax=[ <オブジェクト>, <ベクトル> ]\n[ <ベクトル>, <開始点> ]
Transpose.Syntax=[ <行列> ]
TrapezoidalSum.Syntax=[ <関数>, <x開始値>, <x終了値>, <台形の数> ]
TravelingSalesman.Syntax=[ <点のリスト> ]
TriangleCenter.Syntax=[ <点>, <点>, <点>, <数値> ]
TriangleCurve.Syntax=[ <点>, <点>, <点>, <方程式> ]
Triangular.Syntax=[ <下限>, <上限>, <モード>, <変数値> ]\n[ <下限>, <上限>, <モード>, <変数値>, <累積の真偽値> ]\n[ <下限>, <上限>, <モード>, x, <累積の真偽値> ]
TrigCombine.Syntax=[ <式> ]\n[ <式>, <目標関数> ]
TrigExpand.Syntax=[ <式> ]\n[ <式>, <目標関数> ]
TrigExpand.SyntaxCAS=[ <式> ]\n[ <式>, <目標関数> ]\n[ <式>, <目標関数>, <Target Variable> ]\n[ <式>, <目標関数>, <Target Variable>, <Target Variable> ]
TrigSimplify.Syntax=[ <式> ]
Trilinear.Syntax=[ <点>, <点>, <点>, <数値>, <数値>, <数値> ]
TurningPoint.Syntax=[ <多項式> ]
TurningPoint.SyntaxCAS=[ <関数> ]
Turtle.Syntax=[]
TurtleBack.Syntax=[ <タートル>, <距離> ]
TurtleDown.Syntax=[ <タートル> ]
TurtleForward.Syntax=[ <タートル>, <距離> ]
TurtleLeft.Syntax=[ <タートル>, <角度> ]
TurtleRight.Syntax=[ <タートル>, <角度> ]
TurtleUp.Syntax=[ <タートル> ]
Type.Syntax=[ <オブジェクト> ]
UnicodeToLetter.Syntax=[ <整数> ]
UnicodeToText.Syntax=[ <整数のリスト> ]
Uniform.Syntax=[ <下限>, <上限>, <変数値> ]\n[ <下限>, <上限>, <変数値>, <累積の真偽値> ]\n[ <下限>, <上限>, x, <累積の真偽値> ]
Union.Syntax=[ <リスト>, <リスト> ]\n[ <多角形>, <多角形> ]
Unique.Syntax=[ <リスト> ]
UnitOrthogonalVector.Syntax=[ <直線> ]\n[ <線分> ]\n[ <ベクトル> ]
UnitOrthogonalVector.Syntax3D=[ <直線> ]\n[ <線分> ]\n[ <ベクトル> ]\n[ <平面> ]
UnitOrthogonalVector.SyntaxCAS=[ <ベクトル> ]
UnitVector.Syntax=[ <オブジェクト> ]
UnitVector.SyntaxCAS=[ <ベクトル> ]
UpdateConstruction.Syntax=[ ]\n[ <回数> ]
UpperSum.Syntax=[ <関数>, <x開始値>, <x終了値>, <長方形の数> ]
Variance.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
Vector.Syntax=[ <点> ]\n[ <開始点>, <終了点> ]
Vertex.Syntax=[ <２次曲線> ]\n[ <不等式> ]\n[ <多角形> ]\n[ <多角形>, <インデックス> ]\n[ <線分>, <インデックス> ]
VerticalText.Syntax=[ <テキスト> ]\n[ <テキスト>, <点> ]
Volume.Syntax=[ <立体> ]
Voronoi.Syntax=[ <点のリスト> ]
Weibull.Syntax=[ <シェイプ>, <スケール>, <変数値> ]\n[ <シェイプ>, <スケール>, <変数値>, <累積の真偽値> ]\n[ <シェイプ>, <スケール>, x, <累積の真偽値> ]
Weibull.SyntaxCAS=[ <シェイプ>, <スケール>, <変数値> ]
ZMean2Estimate.Syntax=[ <標本データ1のリスト>, <標本データ2のリスト>, <σ1>, <σ2>, <信頼度> ]\n[ <標本平均1>, <σ1>, <標本の大きさ1>, <標本平均2>, <σ2>, <標本の大きさ2>, <信頼度> ]
ZMean2Test.Syntax=[ <標本データ1のリスト>, <σ1>, <標本データ2のリスト>, <σ2>, <裾> ]\n[ <標本平均1>, <σ1>, <標本の大きさ1>, <標本平均2>, <σ2>, <標本の大きさ2>, <裾> ]
ZMeanEstimate.Syntax=[ <標本データのリスト>, <σ>, <信頼度> ]\n[ <標本平均>, <σ>, <標本の大きさ>, <信頼度> ]
ZMeanTest.Syntax=[ <標本データのリスト>, <σ>, <仮説平均>, <裾> ]\n[ <標本平均>, <σ>, <標本の大きさ>, <仮説平均>, <裾> ]
ZProportion2Estimate.Syntax=[ <標本比率1>, <標本の大きさ1>, <標本比率2>, <標本の大きさ2>, <信頼度> ]
ZProportion2Test.Syntax=[ <標本比率1>, <標本の大きさ1>, <標本比率2>, <標本の大きさ2>, <裾> ]
ZProportionEstimate.Syntax=[ <標本比率>, <標本の大きさ>, <信頼度> ]
ZProportionTest.Syntax=[ <標本比率>, <標本の大きさ>, <仮説比率>, <裾> ]
Zip.Syntax=[ <式>, <Var1>, <List1>, <Var2>, <List2>, ... ]
Zipf.Syntax=[ <要素の数>, <指数> ]\n[ <要素の数>, <指数>, <累積の真偽値> ]\n[ <要素の数>, <指数>, <変数値>, <累積の真偽値> ]
Zipf.SyntaxCAS=[ <要素の数>, <指数>, <変数値>, <累積の真偽値> ]
ZoomIn.Syntax=[ ]\n[ <倍率> ]\n[ <倍率>, <中心点> ]\n[ <x最小>, <y最小>, <x最大>, <y最大> ]\n[ <x最小>, <y最小>, <最小 z>, <x最大>, <y最大>, <最大 z> ]
ZoomOut.Syntax=[ <倍率> ]\n[ <倍率>, <中心点> ]
mad.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
mean.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
nCr.Syntax=[ <数値>, <数値> ]
stdev.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]
stdevp.Syntax=[ <生データのリスト> ]\n[ <数値のリスト>, <度数のリスト> ]