
buildscript {
    dependencies {
        classpath 'org.wisepersist:gwt-gradle-plugin:1.0.13'
    }
}

plugins {
    id 'java'
    id 'pmd'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.6.0"
    id 'de.aaschmid.cpd' version '3.1'
}

description 'Parts of GeoGebra related to web platforms'

evaluationDependsOn(':common')
evaluationDependsOn(':ggbjdk')
evaluationDependsOn(':editor-web')
evaluationDependsOn(':web:dev')
evaluationDependsOn(':keyboard-web')

apply plugin: 'gwt-compiler'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    nonfree
    gpl
    main {
        resources {
            if (project.hasProperty("usegpl")) {
                srcDirs += gpl.resources.srcDirs
            } else {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

if(hasProperty("eclipse")){
    eclipse.classpath.sourceSets.removeAll { it.name == 'nonfree' || it.name == 'gpl'}
}

dependencies {
    compile project(path: ':carota-web'),
        project(':web:dev'),
        project(':common'),
        project(':renderer-base'),
        project(':editor-base'),
        project(':renderer-web'),
        project(':editor-web'),
        project(':keyboard-web'),
        project(':ggbjdk'),
        files(project(':carota-web').sourceSets.main.allSource.srcDirs),
        files(project(':web:dev').sourceSets.main.allSource.srcDirs),
        files(project(':common').sourceSets.main.allSource.srcDirs),
        files(project(':ggbjdk').sourceSets.main.java.srcDirs),
        files(project(':editor-web').sourceSets.main.allSource.srcDirs),
        files(project(':keyboard-web').sourceSets.main.allSource.srcDirs),
        // "fr.ujf-grenoble:giac-gwt:69820", // FIXME: this is now hardcoded (new official version uses different libraries)
        // "fr.ujf-grenoble:giac-gwt:69820:sources",
        "tk.tarski:giac-gwt:$javaGiacVersion",
        "tk.tarski:giac-gwt:$javaGiacVersion:sources",
        "com.google.gwt:gwt-dev:$gwtCompilerVersion"

    testCompile "junit:junit:$junitVersion",
        'com.google.gwt.gwtmockito:gwtmockito:1.1.10-SNAPSHOT',
        "com.google.gwt:gwt-user:$gwtCompilerVersion"
}

def devModule = project.findProperty("gmodule") ?: 'org.geogebra.web.SuperWeb'

ext.appSpecs = [
    [id:'classic', title:'Classic', transKey:'Classic', exe:'GeoGebra', pkg:'GeoGebra_6.0',
        releases: 'Releases', icon: 'ggb.ico', measurementId: 'G-8JGZQG6FHG',
        firebaseAppId: '1:895270214636:web:3c05deeefcd1a96584fec9'],
    [id:'graphing', title:'Graphing Calculator', transKey:'GraphingCalculator',
        exe:'GeoGebraGraphing', pkg:'GeoGebra_Graphing', releases: 'Releases-graphing',
        icon: 'Graphing.ico', appStoreId:'1146717204', measurementId: 'G-55K7P9GRQK',
        firebaseAppId: '1:895270214636:web:db7055c9a67f1f1e84fec9'],
    [id:'3d', title:'3D Graphing Calculator', transKey:'Graphing3D', appStoreId:'1445871976',
        firebaseAppId: '1:895270214636:web:574d60209dda5f5384fec9',
        measurementId: 'G-PMP3RB4M8S'],
    [id:'cas', title:'CAS Calculator', transKey:'CASCalculator',
        exe:'GeoGebraCAS', pkg:'GeoGebra_CAS',  releases: 'Releases-cas',
        icon: 'CAS.ico', appStoreId:'1436278267', measurementId: 'G-N3Z7S82FZ6',
        firebaseAppId: '1:895270214636:web:87b00b628121939d84fec9'],
    [id:'scientific', title:'Scientific Calculator', transKey:'ScientificCalculator',
        partials:["undo-redo"], appStoreId:'1412748754', measurementId: 'G-YJ1QVF1SFK',
        firebaseAppId: '1:895270214636:web:540b533d4b47a7bb84fec9'],
    [id:'geometry', title:'Geometry', transKey:'Geometry',
        exe:'GeoGebraGeometry', pkg:'GeoGebra_Geometry', releases: 'Releases-geometry',
        icon: 'Geometry.ico', appStoreId:'1232591335', measurementId: 'G-82GL4RTR4H',
        firebaseAppId: '1:895270214636:web:6bf3d469e0d2b32584fec9'],
    [id:'suite', title:'Calculator Suite', transKey:'CalculatorSuite',
         firebaseAppId: '1:895270214636:web:7daf432883a8464084fec9', icon: 'ggb.ico',
         measurementId: 'G-FXVLXMD21Y', appStoreId: '1504416652',
         pkg:'GeoGebra_Calculator', exe: 'GeoGebraCalculator', releases: 'Releases-suite',],
    [id:'notes', title:'Notes', transKey: 'Notes', exe:'GeoGebraNotes', pkg:'GeoGebra_Notes',
         releases: 'Releases-notes', icon: 'notes.ico', measurementId: 'G-MWHBRQSXTL',
         firebaseAppId: '1:895270214636:web:aece5066924cacb084fec9'],
    [id:'notes-mebis', title:'Tafel', transKey: 'Tafel', exe:'MebisTafel', pkg:'Mebis_Tafel',
         icon: 'notes.ico', vendor: "Mebis"]]

gwt {
    gwtVersion = gwtCompilerVersion

    if (project.hasProperty("gmodule")) {
        modules = project.getProperty("gmodule").split(",")
    } else {
        modules = ['org.geogebra.web.Web3D', 'org.geogebra.web.WebSimple', 'org.geogebra.web.Web',
          'org.geogebra.web.Tablet3D']
    }
    
    devModules devModule
    
    maxHeapSize = '2000M'

    jsInteropExports {
        shouldGenerate = true;
    }

    compiler {
        // Customize the GWT compiler here
        strict = true
        disableCastChecking = true
      
        if (project.hasProperty("greport")) {
           compileReport = true
        }
        if (project.hasProperty("gdraft")) {
            draftCompile = true
        }
        if (project.hasProperty("gworkers")) {
            localWorkers = project.getProperty("gworkers")
        }
        if (project.hasProperty("gdetailed")){
            style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED
        } else {
            disableClassMetadata = true
        }
        if (project.hasProperty("gsoyc")) {
            soycDetailed = true
        }
        // style = de.richsource.gradle.plugins.gwt.Style.PRETTY;    
    }
}

tasks.withType(org.wisepersist.gradle.plugins.gwt.AbstractGwtActionTask) {
    jvmArgs '-Xss512M'
}

def warDirRel = 'war'
def outputs = ['web', 'web3d', 'webSimple', 'solver', 'tablet3d','tabletWin']

task cleanWar(type: Delete) {
    doLast {
      outputs.each { folder ->
          delete warDirRel + "/$folder"
      }
    }
}

apply from: "templates.gradle"
task copyHtml {
    description 'Generate app.html, app-release.html, graphing.html and others'
    group 'application'

    doLast {
        delete {
            delete fileTree(dir:'war', include: "*.html")
        }

        copy {
            from file("../common/src/main/resources/giac")
            into warDirRel
        }
        copy {
            from file("src/main/resources/org/geogebra/web/resources/war")
            into warDirRel
        }

        appSpecs.each { app ->
            def appID = app.id.split("-")[0]
            def replaceHtml = app.id == "classic" ? classicHtml : appHtml
            file("war/${app.id}-offline.html").text = english(replaceHtml(app, false, true), app.title)
            file("war/${app.id}.html").text = english(replaceHtml(app, true), app.title)
            if (app.vendor == "Mebis") {
                file("war/${app.id}-template.html").text = replaceHtml(app, false).replace("<!--CODEBASE-->", "/")
            }
        }
        file("war/calculator.html").text = file("war/suite.html").text
    }
}

task copyHandlebars {
    doLast {
        def handlebarsDir = project.getProperty("handlebarsDir")
        appSpecs.each { app ->
            def appID = app.id.split("-")[0]
            def replaceHtml = app.id == "classic" ? classicHtml : appHtml

            def templatePath =  "${handlebarsDir}/${app.id}-template.handlebars"
            file(templatePath).text = handlebars(replaceHtml(app, false))
        }
        String solver = solverHtml()
        def solverPath = "${handlebarsDir}/solver-template.handlebars"
        file(solverPath).text = handlebars(solver.replace("<!--APP TYPE-->", "solver"))
    }
}

task createSolverHtml {
    doLast {
        String solver = solverHtml()
        // for localhost and autotest
        file("war/solver.html").text = solver
            .replace("<!--APP NAME-->", "Math Solver")
            .replace("<!--APP TYPE-->", "solver")
            .replace("<!--SIGN IN-->", "Sign In")
            .replace("<!--LANGUAGE LINKS-->", "<script>codebase=\"./\"</script>")
        file("war/exercise.html").text = solver
            .replace("<!--APP NAME-->", "Exercise app")
            .replace("<!--SIGN IN-->", "Sign In")
            .replace("<!--APP TYPE-->", "practice")
            .replace("<!--LANGUAGE LINKS-->", "<script>codebase=\"./\"</script>")
    }
}

task prepareS3Upload(dependsOn: ['compileGwt', 'copyHtml']) {
    doLast {
        ["web3d", "webSimple"].each { module ->
            def dir = file("build/gwt/out/$module")
            fileTree(dir).each { f ->
                println "$f -> $f"
                def outFile = file("$f".replace(dir.absolutePath, "build/s3/$module/"))
                file(outFile.parent).mkdirs()
                ant.gzip(src: f, zipfile: outFile)
            }
        }
    }
}

task deployIntoWar(type: Copy, dependsOn: ['cleanWar','copyHtml', 'createSolverHtml']) {
    description 'Copies/updates the GWT production compilation directory (web3d, ...) to the war directory.'
    from compileGwt
    into warDirRel
}

task mergeDeploy(){
   description 'merge deploy.js and web3d.nocache.js'
   mustRunAfter 'compileGwt'
   doLast {
      def web3dPermutation = file("./build/gwt/out/web3d/deferredjs").listFiles()[0].name
      def webSimplePermutation = file("./build/gwt/out/webSimple/deferredjs").listFiles()[0].name
      def templateJs = "src/main/resources/org/geogebra/web/resources/js/deployggb-template.js"
      def deployText = file(templateJs).text.replace('%WEB3D_PERMUTATION%', web3dPermutation)
                          .replace('%WEBSIMPLE_PERMUTATION%', webSimplePermutation)
      def parentRoot = project(":common").getBuildDir().getAbsolutePath() + "/../../"
      def currentVersion = getGeogebraVersion(parentRoot)
      file(warDirRel + "/deployggb.js").text = deployText.replace('%MODULE_BASE%','./')
      file(warDirRel + "/deployggb-latest.js").text = deployText.replace('%MODULE_BASE%','https://www.geogebra.org/apps/latest/')
      file(warDirRel + "/deployggb-${currentVersion}.js").text = deployText.replace('%MODULE_BASE%',"https://www.geogebra.org/apps/${currentVersion}/")
   }
}

def gwtGlobalCache = file('build/gwt/devModeCache')
// As now this task doesn't finish until the java process exits.
// This causes some problems as the IDE cannot run any other tasks.
// https://issues.gradle.org/browse/GRADLE-1254
task run(type: JavaExec, dependsOn: ['jar','copyHtml', 'createSolverHtml']) {
    description 'Starts a codeserver, and a simple webserver for development'
    doFirst {
        delete {
            delete gwtGlobalCache
        }
        gwtGlobalCache.mkdirs()
    }
    main 'com.google.gwt.dev.DevMode'
    maxHeapSize '4096m'
    classpath ((configurations.compile as Set<String>) 
        + (sourceSets.main.allSource.srcDirs as Set<String>) 
        + (jar.archivePath as String))
    workingDir file(warDirRel)
    args '-logLevel', 'TRACE',
        '-codeServerPort', '9997',
        '-port', '8888',
        '-style', 'PRETTY',
        '-bindAddress', project.findProperty("gbind") ?: 'localhost',
        '-superDevMode',
        '-war', file(warDirRel),
        '-generateJsInteropExports',
        devModule
    systemProperty 'gwt.persistentunitcachedir', '../build/gwt/devModeCache'
    systemProperty 'java.io.tmpdir', gwtGlobalCache.getAbsolutePath()
}

task createDraftBundleZip (type: Zip) {
    description 'Creates the Math Apps Bundle file.'
    destinationDir = file(warDirRel)
    baseName = "geogebra-bundle"
    from compileGwt {
        include ("web3d/**")
        into "GeoGebra/HTML5/5.0"
    }
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}

test {
    ignoreFailures = true
    maxHeapSize = "1024m"
}

spotbugs {
    ignoreFailures = true
    excludeFilter = file("config/findbugs.xml")
    jvmArgs = ['-Dfindbugs.sf.comment=true']
}

pmd {
     ignoreFailures = true
     ruleSets = []
     ruleSetFiles = files("../config/pmd.xml")
}

cpd {
    ignoreFailures = true
    minimumTokenCount = 100
}

tasks.withType(de.aaschmid.gradle.plugins.cpd.Cpd) {
    exclude "**/*.html"
    exclude "**/*.jj"
    exclude "**/*.xml"
    exclude "**/*.svg"
}
